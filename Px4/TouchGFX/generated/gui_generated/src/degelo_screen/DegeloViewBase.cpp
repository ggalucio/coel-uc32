/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/degelo_screen/DegeloViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

DegeloViewBase::DegeloViewBase() :
    buttonCallback(this, &DegeloViewBase::buttonCallbackHandler),
    cANCELAR_PROCESSO1CancelarProcessoCallback(this, &DegeloViewBase::cANCELAR_PROCESSO1CancelarProcessoCallbackHandler),
    cANCELAR_PROCESSO1NaoCallback(this, &DegeloViewBase::cANCELAR_PROCESSO1NaoCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    boxFundo.setPosition(0, 0, 480, 272);
    boxFundo.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    boxFundoAzul.setPosition(0, 0, 480, 53);
    boxFundoAzul.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));

    boxProcessOff.setPosition(5, 64, 392, 196);
    boxProcessOff.setColor(touchgfx::Color::getColorFromRGB(241, 241, 242));

    boxWithBorder1.setPosition(93, 75, 298, 85);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    boxWithBorder1.setBorderSize(1);

    boxWithBorder1_1.setPosition(93, 167, 298, 85);
    boxWithBorder1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorder1_1.setBorderColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    boxWithBorder1_1.setBorderSize(1);

    boxFundoAzul2.setPosition(189, 136, 105, 19);
    boxFundoAzul2.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));

    boxFundoAzul2_1.setPosition(189, 227, 105, 19);
    boxFundoAzul2_1.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_AMPULHETA_ID));
    scalableImage1.setPosition(33, 191, 41, 43);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_EVAPORADOR_ID));
    scalableImage2.setPosition(25, 100, 57, 33);
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    imageIcon.setXY(8, 4);
    imageIcon.setBitmap(touchgfx::Bitmap(BITMAP_GOTA_ID));

    textAreaLabel3.setXY(98, 81);
    textAreaLabel3.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textAreaLabel3.setLinespacing(0);
    textAreaLabel3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3810));

    textAreaLabel3_1.setXY(98, 172);
    textAreaLabel3_1.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textAreaLabel3_1.setLinespacing(0);
    textAreaLabel3_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3811));

    textAreaUnidade1.setXY(332, 105);
    textAreaUnidade1.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textAreaUnidade1.setLinespacing(0);
    textAreaUnidade1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3808));

    textAreaUnidade2.setXY(324, 194);
    textAreaUnidade2.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textAreaUnidade2.setLinespacing(0);
    textAreaUnidade2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3809));

    textAreaTitle.setXY(48, 8);
    textAreaTitle.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaTitle.setLinespacing(0);
    textAreaTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3799));

    buttonFinalizarDegelo.setXY(406, 64);
    buttonFinalizarDegelo.setBitmaps(touchgfx::Bitmap(BITMAP_VOLTAR_ID), touchgfx::Bitmap(BITMAP_VOLTAR_ID));
    buttonFinalizarDegelo.setAction(buttonCallback);

    toggleButtonDegeloProcessoAutomatico.setXY(406, 208);
    toggleButtonDegeloProcessoAutomatico.setBitmaps(touchgfx::Bitmap(BITMAP_STOP_ID), touchgfx::Bitmap(BITMAP_AUTO_ID));
    toggleButtonDegeloProcessoAutomatico.setAction(buttonCallback);

    textAreaFlagProcessoAndamento.setPosition(308, 14, 160, 25);
    textAreaFlagProcessoAndamento.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaFlagProcessoAndamento.setLinespacing(0);
    Unicode::snprintf(textAreaFlagProcessoAndamentoBuffer, TEXTAREAFLAGPROCESSOANDAMENTO_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4055).getText());
    textAreaFlagProcessoAndamento.setWildcard(textAreaFlagProcessoAndamentoBuffer);
    textAreaFlagProcessoAndamento.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4054));

    textArea14513.setPosition(180, 100, 121, 56);
    textArea14513.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textArea14513.setLinespacing(0);
    Unicode::snprintf(textArea14513Buffer, TEXTAREA14513_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3801).getText());
    textArea14513.setWildcard(textArea14513Buffer);
    textArea14513.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3800));

    textArea1410272.setPosition(189, 136, 105, 18);
    textArea1410272.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea1410272.setLinespacing(0);
    Unicode::snprintf(textArea1410272Buffer, TEXTAREA1410272_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3803).getText());
    textArea1410272.setWildcard(textArea1410272Buffer);
    textArea1410272.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3802));

    textAreaTimerDegeloCountMinutos.setPosition(180, 191, 121, 56);
    textAreaTimerDegeloCountMinutos.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textAreaTimerDegeloCountMinutos.setLinespacing(0);
    Unicode::snprintf(textAreaTimerDegeloCountMinutosBuffer, TEXTAREATIMERDEGELOCOUNTMINUTOS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3805).getText());
    textAreaTimerDegeloCountMinutos.setWildcard(textAreaTimerDegeloCountMinutosBuffer);
    textAreaTimerDegeloCountMinutos.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3804));

    textArea1410270.setPosition(189, 227, 105, 18);
    textArea1410270.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea1410270.setLinespacing(0);
    Unicode::snprintf(textArea1410270Buffer, TEXTAREA1410270_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3807).getText());
    textArea1410270.setWildcard(textArea1410270Buffer);
    textArea1410270.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3806));

    cANCELAR_PROCESSO1.setXY(0, 0);
    cANCELAR_PROCESSO1.setVisible(false);
    cANCELAR_PROCESSO1.setCancelarProcessoCallback(cANCELAR_PROCESSO1CancelarProcessoCallback);
    cANCELAR_PROCESSO1.setNaoCallback(cANCELAR_PROCESSO1NaoCallback);

    imageStatusPorta.setXY(200, 0);
    imageStatusPorta.setVisible(false);
    imageStatusPorta.setBitmap(touchgfx::Bitmap(BITMAP_PORTA_ID));

    textAreaStatusPorta.setXY(98, 13);
    textAreaStatusPorta.setVisible(false);
    textAreaStatusPorta.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaStatusPorta.setLinespacing(0);
    Unicode::snprintf(textAreaStatusPortaBuffer, TEXTAREASTATUSPORTA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4130).getText());
    textAreaStatusPorta.setWildcard(textAreaStatusPortaBuffer);
    textAreaStatusPorta.resizeToCurrentText();
    textAreaStatusPorta.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4129));

    add(__background);
    add(boxFundo);
    add(boxFundoAzul);
    add(boxProcessOff);
    add(boxWithBorder1);
    add(boxWithBorder1_1);
    add(boxFundoAzul2);
    add(boxFundoAzul2_1);
    add(scalableImage1);
    add(scalableImage2);
    add(imageIcon);
    add(textAreaLabel3);
    add(textAreaLabel3_1);
    add(textAreaUnidade1);
    add(textAreaUnidade2);
    add(textAreaTitle);
    add(buttonFinalizarDegelo);
    add(toggleButtonDegeloProcessoAutomatico);
    add(textAreaFlagProcessoAndamento);
    add(textArea14513);
    add(textArea1410272);
    add(textAreaTimerDegeloCountMinutos);
    add(textArea1410270);
    add(cANCELAR_PROCESSO1);
    add(imageStatusPorta);
    add(textAreaStatusPorta);
}

void DegeloViewBase::setupScreen()
{
    cANCELAR_PROCESSO1.initialize();
    //ScreenTransitionBegins
    //When screen transition begins execute C++ code
    //Execute C++ code
    Clear();
    
    ReadWriteModbus485(&textAreaStatusPorta, textAreaStatusPortaBuffer, "553", 0, _INT_, REPEAT);
    
    Update(&textArea14513, textArea14513Buffer, 0, _DOUBLE_, 1);
    Update(&textArea1410272, textArea1410272Buffer, 0, _DOUBLE_, 1);
    Update(&textAreaTimerDegeloCountMinutos, textAreaTimerDegeloCountMinutosBuffer, 0, _DOUBLE_, 1);
    Update(&textArea1410270, textArea1410270Buffer, 0, _DOUBLE_, 1);
    
    Update(&textAreaFlagProcessoAndamento, textAreaFlagProcessoAndamentoBuffer, "OPERANDO...", 20);
    countCycleBlink = 0;

}

//Called when the screen transition ends
void DegeloViewBase::afterTransition()
{
    //ScreenTransitionEnds
    //When screen transition ends execute C++ code
    //Execute C++ code
    SoundBuzzerOn(25);
}

void DegeloViewBase::cANCELAR_PROCESSO1CancelarProcessoCallbackHandler()
{
    //CancelarProcesso
    //When cANCELAR_PROCESSO1 cancelarProcesso change screen to Degelo_Confirmar
    //Go to Degelo_Confirmar with no screen transition
    application().gotoDegelo_ConfirmarScreenNoTransition();
}

void DegeloViewBase::cANCELAR_PROCESSO1NaoCallbackHandler()
{
    //Nao
    //When cANCELAR_PROCESSO1 nao execute C++ code
    //Execute C++ code
    ContainerVisibility(&cANCELAR_PROCESSO1, false);
    SoundBuzzerOn(25);
}

void DegeloViewBase::handleTickEvent()
{
    //HandleTickEvent
    //When handleTickEvent is called execute C++ code
    //Execute C++ code
    if ((touchgfx::Unicode::atoi(textAreaStatusPortaBuffer)) == 1){
    	imageStatusPorta.setVisible(true);
    }else{
    	imageStatusPorta.setVisible(false);
    }
    invalidate();
    
    if (countCycleBlink > 1000)
    {
    	countCycleBlink = 0;
    	VisibilityTextArea(&textAreaFlagProcessoAndamento, !textAreaFlagProcessoAndamento.isVisible());
    }
    
    countCycleBlink += 16;
}

void DegeloViewBase::tearDownScreen()
{
    //TearDownScreen
    //When tearDownScreen is called execute C++ code
    //Execute C++ code
    Clear();
    ClearOthers();
}

void DegeloViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonFinalizarDegelo)
    {
        //Voltar
        //When buttonFinalizarDegelo clicked execute C++ code
        //Execute C++ code
        ContainerVisibility(&cANCELAR_PROCESSO1, true);
        SoundBuzzerOn(25);
    }
    else if (&src == &toggleButtonDegeloProcessoAutomatico)
    {
        //DegeloProcessoAutomatico
        //When toggleButtonDegeloProcessoAutomatico clicked execute C++ code
        //Execute C++ code
        SoundBuzzerOn(25);
    }
}
