/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/congelar_select_tempo_screen/Congelar_select_TEMPOViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Congelar_select_TEMPOViewBase::Congelar_select_TEMPOViewBase() :
    buttonCallback(this, &Congelar_select_TEMPOViewBase::buttonCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    boxFundo.setPosition(0, 0, 480, 272);
    boxFundo.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    boxFundoAzul.setPosition(0, 0, 480, 53);
    boxFundoAzul.setColor(touchgfx::Color::getColorFromRGB(26, 100, 160));

    boxFundoMinutos.setPosition(123, 128, 166, 54);
    boxFundoMinutos.setColor(touchgfx::Color::getColorFromRGB(42, 106, 162));

    textAreaTitle.setXY(5, 8);
    textAreaTitle.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaTitle.setLinespacing(0);
    textAreaTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3633));

    textAreaUnidade.setXY(302, 137);
    textAreaUnidade.setColor(touchgfx::Color::getColorFromRGB(42, 106, 162));
    textAreaUnidade.setLinespacing(0);
    textAreaUnidade.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3638));

    textAreaTimerSpMinutos.setPosition(123, 128, 166, 54);
    textAreaTimerSpMinutos.setColor(touchgfx::Color::getColorFromRGB(240, 240, 240));
    textAreaTimerSpMinutos.setLinespacing(0);
    Unicode::snprintf(textAreaTimerSpMinutosBuffer, TEXTAREATIMERSPMINUTOS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3864).getText());
    textAreaTimerSpMinutos.setWildcard(textAreaTimerSpMinutosBuffer);
    textAreaTimerSpMinutos.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3636));

    buttonWithLabelIncrementar.setXY(173, 70);
    buttonWithLabelIncrementar.setBitmaps(touchgfx::Bitmap(BITMAP_VAZIO_ID), touchgfx::Bitmap(BITMAP_VAZIO_ID));
    buttonWithLabelIncrementar.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3634));
    buttonWithLabelIncrementar.setLabelColor(touchgfx::Color::getColorFromRGB(42, 106, 162));
    buttonWithLabelIncrementar.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabelIncrementar.setAction(buttonCallback);

    buttonWithLabelDecrementar.setXY(173, 188);
    buttonWithLabelDecrementar.setBitmaps(touchgfx::Bitmap(BITMAP_VAZIO_ID), touchgfx::Bitmap(BITMAP_VAZIO_ID));
    buttonWithLabelDecrementar.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3635));
    buttonWithLabelDecrementar.setLabelColor(touchgfx::Color::getColorFromRGB(42, 106, 162));
    buttonWithLabelDecrementar.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabelDecrementar.setAction(buttonCallback);

    textAreaTempoZero.setXY(15, 65);
    textAreaTempoZero.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textAreaTempoZero.setLinespacing(0);
    textAreaTempoZero.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4020));

    buttonAvancar.setXY(406, 208);
    buttonAvancar.setBitmaps(touchgfx::Bitmap(BITMAP_AVANCE_ID), touchgfx::Bitmap(BITMAP_AVANCEON_ID));
    buttonAvancar.setAction(buttonCallback);

    buttonVoltar.setXY(406, 64);
    buttonVoltar.setBitmaps(touchgfx::Bitmap(BITMAP_VOLTAR_ID), touchgfx::Bitmap(BITMAP_VOLTAR_ID));
    buttonVoltar.setAction(buttonCallback);

    imageStatusPorta.setXY(200, 0);
    imageStatusPorta.setVisible(false);
    imageStatusPorta.setBitmap(touchgfx::Bitmap(BITMAP_PORTA_ID));

    textAreaStatusPorta.setXY(98, 13);
    textAreaStatusPorta.setVisible(false);
    textAreaStatusPorta.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaStatusPorta.setLinespacing(0);
    Unicode::snprintf(textAreaStatusPortaBuffer, TEXTAREASTATUSPORTA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4112).getText());
    textAreaStatusPorta.setWildcard(textAreaStatusPortaBuffer);
    textAreaStatusPorta.resizeToCurrentText();
    textAreaStatusPorta.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4111));

    add(__background);
    add(boxFundo);
    add(boxFundoAzul);
    add(boxFundoMinutos);
    add(textAreaTitle);
    add(textAreaUnidade);
    add(textAreaTimerSpMinutos);
    add(buttonWithLabelIncrementar);
    add(buttonWithLabelDecrementar);
    add(textAreaTempoZero);
    add(buttonAvancar);
    add(buttonVoltar);
    add(imageStatusPorta);
    add(textAreaStatusPorta);
}

void Congelar_select_TEMPOViewBase::setupScreen()
{

    //ScreenTransitionBegins
    //When screen transition begins execute C++ code
    //Execute C++ code
    W_HDW5000 = 4;
    
    Clear();
    
    ReadWriteModbus485(&textAreaStatusPorta, textAreaStatusPortaBuffer, "553", 0, _INT_, REPEAT);
    
    Update(&textAreaTimerSpMinutos, textAreaTimerSpMinutosBuffer, 0, _INT_, 0);
    VisibilityTextArea(&textAreaTempoZero, false);
    countCycleBlink = 0;
    isZeroValue = false;

}

//Called when the screen transition ends
void Congelar_select_TEMPOViewBase::afterTransition()
{
    //ScreenTransitionEnds
    //When screen transition ends execute C++ code
    //Execute C++ code
    SoundBuzzerOn(25);
}

void Congelar_select_TEMPOViewBase::handleTickEvent()
{
    //HandleTickEvent
    //When handleTickEvent is called execute C++ code
    //Execute C++ code
    if ((touchgfx::Unicode::atoi(textAreaStatusPortaBuffer)) == 1){
    	imageStatusPorta.setVisible(true);
    }else{
    	imageStatusPorta.setVisible(false);
    }
    invalidate();
    W_1_4553 = imageStatusPorta.isVisible();
    
    if (countCycleBlink > 1000)
    {
    	countCycleBlink = 0;
    	if (isZeroValue)
    		VisibilityTextArea(&textAreaTempoZero, !textAreaTempoZero.isVisible());
    }
    
    countCycleBlink += 16;
}

void Congelar_select_TEMPOViewBase::tearDownScreen()
{
    //TearDownScreen
    //When tearDownScreen is called execute C++ code
    //Execute C++ code
    Clear();
    ClearOthers();
}

void Congelar_select_TEMPOViewBase::Congelar_TEMPO()
{
    //CongelarTEMPO
    //When Congelar_TEMPO is called change screen to Congelar_TEMPO
    //Go to Congelar_TEMPO with no screen transition
    application().gotoCongelar_TEMPOScreenNoTransition();
}

void Congelar_select_TEMPOViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabelIncrementar)
    {
        //Incrementar
        //When buttonWithLabelIncrementar clicked execute C++ code
        //Execute C++ code
        Increase(&textAreaTimerSpMinutos, textAreaTimerSpMinutosBuffer, 1, 0, 9999, _INT_, 0);
        SoundBuzzerOn(25);
    }
    else if (&src == &buttonWithLabelDecrementar)
    {
        //Decrementar
        //When buttonWithLabelDecrementar clicked execute C++ code
        //Execute C++ code
        Decrease(&textAreaTimerSpMinutos, textAreaTimerSpMinutosBuffer, 1, 0, 9999, _INT_, 0);
        SoundBuzzerOn(25);
    }
    else if (&src == &buttonAvancar)
    {
        //Avancar
        //When buttonAvancar clicked execute C++ code
        //Execute C++ code
        if (GetNumberTextArea(textAreaTimerSpMinutosBuffer) == 0)
        {
        	isZeroValue = true;
        	SoundBuzzerOn(25);
        }
        else
        	Congelar_TEMPO();
    }
    else if (&src == &buttonVoltar)
    {
        //Voltar
        //When buttonVoltar clicked change screen to Congelar
        //Go to Congelar with no screen transition
        application().gotoCongelarScreenNoTransition();
    }
}
