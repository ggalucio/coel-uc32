/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/monitormodbusscreen_screen/MonitorModbusScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MonitorModbusScreenViewBase::MonitorModbusScreenViewBase() :
    buttonCallback(this, &MonitorModbusScreenViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &MonitorModbusScreenViewBase::flexButtonCallbackHandler),
    numKeyboardContainer1HideKeypadTriggerCallback(this, &MonitorModbusScreenViewBase::numKeyboardContainer1HideKeypadTriggerCallbackHandler),
    numKeyboardContainer1OutOfRangeCallback(this, &MonitorModbusScreenViewBase::numKeyboardContainer1OutOfRangeCallbackHandler),
    numKeyboardContainer1ValidRangeCallback(this, &MonitorModbusScreenViewBase::numKeyboardContainer1ValidRangeCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    boxFundo.setPosition(0, 0, 480, 272);
    boxFundo.setColor(touchgfx::Color::getColorFromRGB(74, 74, 74));

    boxWithBorder1.setPosition(7, 59, 378, 171);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(74, 74, 74));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(23, 23, 23));
    boxWithBorder1.setBorderSize(2);

    box1.setPosition(0, 0, 480, 50);
    box1.setColor(touchgfx::Color::getColorFromRGB(235, 235, 0));

    box2.setPosition(26, 79, 122, 65);
    box2.setColor(touchgfx::Color::getColorFromRGB(102, 102, 102));

    box3.setPosition(171, 79, 122, 65);
    box3.setColor(touchgfx::Color::getColorFromRGB(102, 102, 102));

    textArea2.setXY(28, 79);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5442));

    textArea1.setXY(7, 7);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(92, 92, 92));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5441));

    textArea2_1.setXY(173, 79);
    textArea2_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea2_1.setLinespacing(0);
    textArea2_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5443));

    buttonWithIcon1.setXY(420, 212);
    buttonWithIcon1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
    buttonWithIcon1.setIconXY(15, 16);

    textAreaAddr.setPosition(28, 92, 120, 52);
    textAreaAddr.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaAddr.setLinespacing(0);
    Unicode::snprintf(textAreaAddrBuffer, TEXTAREAADDR_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID5445).getText());
    textAreaAddr.setWildcard(textAreaAddrBuffer);
    textAreaAddr.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5444));

    textAreaValue.setPosition(173, 92, 120, 52);
    textAreaValue.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaValue.setLinespacing(0);
    Unicode::snprintf(textAreaValueBuffer, TEXTAREAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID5447).getText());
    textAreaValue.setWildcard(textAreaValueBuffer);
    textAreaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5446));

    buttonWithLabelRead.setXY(21, 152);
    buttonWithLabelRead.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    buttonWithLabelRead.setLabelText(touchgfx::TypedText(T_SINGLEUSEID5448));
    buttonWithLabelRead.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabelRead.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabelRead.setAction(buttonCallback);

    buttonWithLabelWrite.setXY(81, 152);
    buttonWithLabelWrite.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    buttonWithLabelWrite.setLabelText(touchgfx::TypedText(T_SINGLEUSEID5449));
    buttonWithLabelWrite.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabelWrite.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabelWrite.setAction(buttonCallback);

    buttonWithIconProx.setXY(308, 152);
    buttonWithIconProx.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DOWN_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DOWN_ARROW_32_ID));
    buttonWithIconProx.setIconXY(15, 22);
    buttonWithIconProx.setAction(buttonCallback);

    buttonWithIconAnt.setXY(308, 79);
    buttonWithIconAnt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_UP_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_UP_ARROW_32_ID));
    buttonWithIconAnt.setIconXY(15, 22);
    buttonWithIconAnt.setAction(buttonCallback);

    flexButtonEditAddr.setBoxWithBorderPosition(0, 0, 122, 65);
    flexButtonEditAddr.setBorderSize(5);
    flexButtonEditAddr.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexButtonEditAddr.setPosition(26, 79, 122, 65);
    flexButtonEditAddr.setAlpha(0);
    flexButtonEditAddr.setAction(flexButtonCallback);

    flexButtonEditValue.setBoxWithBorderPosition(0, 0, 122, 65);
    flexButtonEditValue.setBorderSize(5);
    flexButtonEditValue.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexButtonEditValue.setPosition(171, 79, 122, 65);
    flexButtonEditValue.setAlpha(0);
    flexButtonEditValue.setAction(flexButtonCallback);

    numKeyboardContainer1.setXY(0, 0);
    numKeyboardContainer1.setVisible(false);
    numKeyboardContainer1.setHideKeypadTriggerCallback(numKeyboardContainer1HideKeypadTriggerCallback);
    numKeyboardContainer1.setOutOfRangeCallback(numKeyboardContainer1OutOfRangeCallback);
    numKeyboardContainer1.setValidRangeCallback(numKeyboardContainer1ValidRangeCallback);

    add(__background);
    add(boxFundo);
    add(boxWithBorder1);
    add(box1);
    add(box2);
    add(box3);
    add(textArea2);
    add(textArea1);
    add(textArea2_1);
    add(buttonWithIcon1);
    add(textAreaAddr);
    add(textAreaValue);
    add(buttonWithLabelRead);
    add(buttonWithLabelWrite);
    add(buttonWithIconProx);
    add(buttonWithIconAnt);
    add(flexButtonEditAddr);
    add(flexButtonEditValue);
    add(numKeyboardContainer1);
}

void MonitorModbusScreenViewBase::setupScreen()
{
    numKeyboardContainer1.initialize();
    //ScreenTransitionBegins
    //When screen transition begins execute C++ code
    //Execute C++ code
    SetModbus485As(0, 9600);

}

//Called when the screen transition ends
void MonitorModbusScreenViewBase::afterTransition()
{
    //ScreenTransitionEnds
    //When screen transition ends execute C++ code
    //Execute C++ code
    SoundBuzzerOn(25);
}

void MonitorModbusScreenViewBase::numKeyboardContainer1HideKeypadTriggerCallbackHandler()
{
    //HideKeyboard
    //When numKeyboardContainer1 HideKeypadTrigger execute C++ code
    //Execute C++ code
    ContainerVisibility(&numKeyboardContainer1, false);
}

void MonitorModbusScreenViewBase::numKeyboardContainer1OutOfRangeCallbackHandler()
{
    //OutOfRange
    //When numKeyboardContainer1 OutOfRange call OutOfRangeMsg on numKeyboardContainer1
    //Call OutOfRangeMsg
    numKeyboardContainer1.OutOfRangeMsg();
}

void MonitorModbusScreenViewBase::numKeyboardContainer1ValidRangeCallbackHandler()
{
    //ValidRange
    //When numKeyboardContainer1 ValidRange call InputValidRange on numKeyboardContainer1
    //Call InputValidRange
    numKeyboardContainer1.InputValidRange();
}

void MonitorModbusScreenViewBase::tearDownScreen()
{

}

void MonitorModbusScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabelRead)
    {
        //Read
        //When buttonWithLabelRead clicked execute C++ code
        //Execute C++ code
        Clear();
        
        uint16_t address = touchgfx::Unicode::atoi(textAreaAddrBuffer);
        ReadWriteModbus485(&textAreaValue, textAreaValueBuffer, address, 1, _DOUBLE_, ONCE);
        
        SoundBuzzerOn(25);
    }
    else if (&src == &buttonWithLabelWrite)
    {
        //Write
        //When buttonWithLabelWrite clicked execute C++ code
        //Execute C++ code
        Clear();
        
        uint16_t address = touchgfx::Unicode::atoi(textAreaAddrBuffer);
        double value = GetNumberTextArea(textAreaValueBuffer);
        
        WriteModbus485(address, 2);
        Wait(50);
        UpdateModbus485(address, value, _DOUBLE_);
        
        SoundBuzzerOn(25);
    }
    else if (&src == &buttonWithIconProx)
    {
        //Posterior
        //When buttonWithIconProx clicked execute C++ code
        //Execute C++ code
        Increase(&textAreaAddr, textAreaAddrBuffer, 1, 0, 65535, _INT_, 0);
        SoundBuzzerOn(25);
    }
    else if (&src == &buttonWithIconAnt)
    {
        //Anterior
        //When buttonWithIconAnt clicked execute C++ code
        //Execute C++ code
        Decrease(&textAreaAddr, textAreaAddrBuffer, 1, 0, 65535, _INT_, 0);
        SoundBuzzerOn(25);
    }
}

void MonitorModbusScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButtonEditAddr)
    {
        //EditAddress
        //When flexButtonEditAddr clicked execute C++ code
        //Execute C++ code
        AddNumKeyboardReference(&textAreaAddr, textAreaAddrBuffer, 0, 65535, _INT_, 0, 1);
        ContainerVisibility(&numKeyboardContainer1, true);
        SoundBuzzerOn(25);

        //LaunchAddressKeyboard
        //When EditAddress completed call LaunchNumericalKeyboard on numKeyboardContainer1
        //Call LaunchNumericalKeyboard
        numKeyboardContainer1.LaunchNumericalKeyboard();
    }
    else if (&src == &flexButtonEditValue)
    {
        //EditValue
        //When flexButtonEditValue clicked execute C++ code
        //Execute C++ code
        AddNumKeyboardReference(&textAreaValue, textAreaValueBuffer, -32767.9, 32766.9, _DOUBLE_, 1, 1);
        ContainerVisibility(&numKeyboardContainer1, true);
        SoundBuzzerOn(25);

        //LaunchValueKeyboard
        //When EditValue completed call LaunchNumericalKeyboard on numKeyboardContainer1
        //Call LaunchNumericalKeyboard
        numKeyboardContainer1.LaunchNumericalKeyboard();
    }
}
