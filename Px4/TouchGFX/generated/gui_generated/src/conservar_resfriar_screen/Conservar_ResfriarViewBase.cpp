/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/conservar_resfriar_screen/Conservar_ResfriarViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Conservar_ResfriarViewBase::Conservar_ResfriarViewBase() :
    buttonCallback(this, &Conservar_ResfriarViewBase::buttonCallbackHandler),
    cANCELAR_PROCESSO1CancelarProcessoCallback(this, &Conservar_ResfriarViewBase::cANCELAR_PROCESSO1CancelarProcessoCallbackHandler),
    cANCELAR_PROCESSO1NaoCallback(this, &Conservar_ResfriarViewBase::cANCELAR_PROCESSO1NaoCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    boxFundo.setPosition(0, 0, 480, 272);
    boxFundo.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    boxFundoAzul.setPosition(0, 0, 480, 53);
    boxFundoAzul.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));

    textAreaTitle.setXY(52, 8);
    textAreaTitle.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaTitle.setLinespacing(0);
    textAreaTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3812));

    imageVazio.setXY(406, 136);
    imageVazio.setBitmap(touchgfx::Bitmap(BITMAP_VAZIO_ID));

    imageVazio_1.setXY(406, 208);
    imageVazio_1.setBitmap(touchgfx::Bitmap(BITMAP_VAZIO_ID));

    imageLogo.setXY(5, 8);
    imageLogo.setBitmap(touchgfx::Bitmap(BITMAP_CONSERVLOGO_ID));

    boxProcessOff.setPosition(5, 64, 392, 196);
    boxProcessOff.setColor(touchgfx::Color::getColorFromRGB(241, 241, 242));

    boxFlagProcessoAndamento.setPosition(5, 64, 392, 196);
    boxFlagProcessoAndamento.setVisible(false);
    boxFlagProcessoAndamento.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));

    boxWithBorderBox3.setPosition(66, 133, 324, 57);
    boxWithBorderBox3.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorderBox3.setBorderColor(touchgfx::Color::getColorFromRGB(44, 182, 115));
    boxWithBorderBox3.setBorderSize(1);

    boxWithBorderBox1.setPosition(66, 70, 324, 57);
    boxWithBorderBox1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorderBox1.setBorderColor(touchgfx::Color::getColorFromRGB(44, 182, 115));
    boxWithBorderBox1.setBorderSize(1);

    boxFundoAzul2.setPosition(181, 168, 105, 19);
    boxFundoAzul2.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));

    image1.setXY(25, 79);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_PAO_ID));

    image3.setXY(27, 143);
    image3.setBitmap(touchgfx::Bitmap(BITMAP_THERMOM_ID));

    textAreaFlagProcessoAndamento.setPosition(308, 14, 160, 25);
    textAreaFlagProcessoAndamento.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaFlagProcessoAndamento.setLinespacing(0);
    Unicode::snprintf(textAreaFlagProcessoAndamentoBuffer, TEXTAREAFLAGPROCESSOANDAMENTO_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4053).getText());
    textAreaFlagProcessoAndamento.setWildcard(textAreaFlagProcessoAndamentoBuffer);
    textAreaFlagProcessoAndamento.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4052));

    textAreaUnidade1.setXY(353, 71);
    textAreaUnidade1.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));
    textAreaUnidade1.setLinespacing(0);
    textAreaUnidade1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3815));

    textAreaUnidade1_1.setXY(353, 134);
    textAreaUnidade1_1.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));
    textAreaUnidade1_1.setLinespacing(0);
    textAreaUnidade1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3819));

    textAreaLabel1.setXY(73, 71);
    textAreaLabel1.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));
    textAreaLabel1.setLinespacing(0);
    textAreaLabel1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3816));

    textAreaLabel1_1.setXY(73, 134);
    textAreaLabel1_1.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));
    textAreaLabel1_1.setLinespacing(0);
    textAreaLabel1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3820));

    buttonCancelarProcesso.setXY(406, 64);
    buttonCancelarProcesso.setBitmaps(touchgfx::Bitmap(BITMAP_VOLTAR_ID), touchgfx::Bitmap(BITMAP_VOLTAR_ID));
    buttonCancelarProcesso.setAction(buttonCallback);

    textArea14515.setPosition(172, 69, 121, 56);
    textArea14515.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));
    textArea14515.setLinespacing(0);
    Unicode::snprintf(textArea14515Buffer, TEXTAREA14515_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3818).getText());
    textArea14515.setWildcard(textArea14515Buffer);
    textArea14515.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3817));

    textArea14512.setPosition(172, 132, 121, 56);
    textArea14512.setColor(touchgfx::Color::getColorFromRGB(44, 182, 115));
    textArea14512.setLinespacing(0);
    Unicode::snprintf(textArea14512Buffer, TEXTAREA14512_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3822).getText());
    textArea14512.setWildcard(textArea14512Buffer);
    textArea14512.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3821));

    textArea1410242.setPosition(181, 168, 105, 18);
    textArea1410242.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea1410242.setLinespacing(0);
    Unicode::snprintf(textArea1410242Buffer, TEXTAREA1410242_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3824).getText());
    textArea1410242.setWildcard(textArea1410242Buffer);
    textArea1410242.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3823));

    cANCELAR_PROCESSO1.setXY(0, 0);
    cANCELAR_PROCESSO1.setVisible(false);
    cANCELAR_PROCESSO1.setCancelarProcessoCallback(cANCELAR_PROCESSO1CancelarProcessoCallback);
    cANCELAR_PROCESSO1.setNaoCallback(cANCELAR_PROCESSO1NaoCallback);

    imageStatusPorta.setXY(200, 0);
    imageStatusPorta.setVisible(false);
    imageStatusPorta.setBitmap(touchgfx::Bitmap(BITMAP_PORTA_ID));

    textAreaStatusPorta.setXY(98, 13);
    textAreaStatusPorta.setVisible(false);
    textAreaStatusPorta.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaStatusPorta.setLinespacing(0);
    Unicode::snprintf(textAreaStatusPortaBuffer, TEXTAREASTATUSPORTA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4120).getText());
    textAreaStatusPorta.setWildcard(textAreaStatusPortaBuffer);
    textAreaStatusPorta.resizeToCurrentText();
    textAreaStatusPorta.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4119));

    add(__background);
    add(boxFundo);
    add(boxFundoAzul);
    add(textAreaTitle);
    add(imageVazio);
    add(imageVazio_1);
    add(imageLogo);
    add(boxProcessOff);
    add(boxFlagProcessoAndamento);
    add(boxWithBorderBox3);
    add(boxWithBorderBox1);
    add(boxFundoAzul2);
    add(image1);
    add(image3);
    add(textAreaFlagProcessoAndamento);
    add(textAreaUnidade1);
    add(textAreaUnidade1_1);
    add(textAreaLabel1);
    add(textAreaLabel1_1);
    add(buttonCancelarProcesso);
    add(textArea14515);
    add(textArea14512);
    add(textArea1410242);
    add(cANCELAR_PROCESSO1);
    add(imageStatusPorta);
    add(textAreaStatusPorta);
}

void Conservar_ResfriarViewBase::setupScreen()
{
    cANCELAR_PROCESSO1.initialize();
    //ScreenTransitionBegins
    //When screen transition begins execute C++ code
    //Execute C++ code
    W_HDW5000 = 9;
    
    Clear();
    
    ReadWriteModbus485(&textAreaStatusPorta, textAreaStatusPortaBuffer, "553", 0, _INT_, REPEAT);
    
    ReadWriteModbus485(&textArea14515, textArea14515Buffer, "515", 1, _DOUBLE_, REPEAT);
    ReadWriteModbus485(&textArea14512, textArea14512Buffer, "512", 1, _DOUBLE_, REPEAT);
    ReadWriteModbus485(&textArea1410242, textArea1410242Buffer, "10242", 1, _DOUBLE_, REPEAT);
    
    //Update(&textArea14515, textArea14515Buffer, 0, _DOUBLE_, 1);
    //Update(&textArea14512, textArea14512Buffer, 0, _DOUBLE_, 1);
    //Update(&textArea1410242, textArea1410242Buffer, 0, _DOUBLE_, 1);
    
    Update(&textAreaFlagProcessoAndamento, textAreaFlagProcessoAndamentoBuffer, "OPERANDO...", 20);
    countCycleBlink = 0;

}

//Called when the screen transition ends
void Conservar_ResfriarViewBase::afterTransition()
{
    //ScreenTransitionEnds
    //When screen transition ends execute C++ code
    //Execute C++ code
    SoundBuzzerOn(25);
}

void Conservar_ResfriarViewBase::cANCELAR_PROCESSO1CancelarProcessoCallbackHandler()
{
    //CancelarProcessoSim
    //When cANCELAR_PROCESSO1 cancelarProcesso execute C++ code
    //Execute C++ code
    flag_Processo_ANDAMENTO = true;
    
    
    if (flag_Processo_ANDAMENTO)
    {
    
    	if (Status_tecla_Congela == 0){		// Modo COngelar Sonda
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("10242", 999);		// SP = 99.9ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    			
    		W_HDW5000 = 19;			// Tela Receita
    			
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON	
    	}	
    
    	if (Status_tecla_Congela == 1){ 		// Modo COngelar Sonda
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("10242", 999);		// SP = 99.9ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    			
    		W_HDW5000 = 1;			// Tela Congelar Sonda
    			
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON	
    	}
    
    	if (Status_tecla_Congela == 2){		// Modo COngelar Tempo
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("10242", 999);		// SP = 99.9ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    		
    		W_HDW5000 = 1;	
    
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON	
    	}
    
    	if (Status_tecla_Congela == 3){		// Modo Resfriar Sonda
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("640", 0);		// Desliga Modo Turbo
    		writeModbus("10242", 999);		// SP = 99.9ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    		
    		W_HDW5000 = 10;
    
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON		
    	}
    
    	if (Status_tecla_Congela == 4){		// Modo Resfriar Tempo
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("10242", 999);		// SP = 99ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    		
    		W_HDW5000 = 10;
    		
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON
    	}
    
    	flag_Processo_ANDAMENTO = false;
    
    	// @Timer_buzzer_ON = 1;			// inicia Timer_Buzzer
    }
    else
    {
    	if (Status_tecla_Congela == 0){   					// if Receita Temperatura
    		W_HDW5000 = 19;							// Tela_Receita Temperatura
    	}						
    	if (Status_tecla_Congela == 1 || Status_tecla_Congela ==2){		// if Congelar_SONDA ou Congelar_Tempo
    		W_HDW5000 = 1;							// Tela_Congelar
    	}
    	if (Status_tecla_Congela == 3 || Status_tecla_Congela == 4){	// if @Status_tecla_Congela=3 or @Status_tecla_Congela=4
    		W_HDW5000 = 10;							// Tela_Resfriar
    	}
    
    }
    
    if (flag_Conservar_ANDAMENTO)
    {
    	if (Status_Conservar == 1){		// Conservar_Congelar
    		W_HDW5000 = 7;			// Tela Conservar
    		writeModbus("10242", 999);		// SP = 99ºC
    		writeModbus("645", 0);		// Controlador em modo Standby
    	}
    	
    	if (Status_Conservar == 2){		// Consewrvar_Resfriar
    		W_HDW5000 = 7;			// Tela COnservar
    		writeModbus("10242", 999);		// SP = 99ºC
    		writeModbus("645", 0);		// Controlador em modo Stand-by
    	}
    	
    	flag_Conservar_ANDAMENTO = false;		// Zera flag_conservar_andamento
    
    	Timer_buzzer_ON = 1;			// inicia Timer_Buzzer
    }
    
    Timer_delay_OUT = 0;		// Zera Timer_delay_OUT
    
    cancelar_processo_SIM = false; 	// Zera bit cancelar_processo_SIM
    
    

    //CancelarProcesso
    //When CancelarProcessoSim completed change screen to Conservacao
    //Go to Conservacao with no screen transition
    application().gotoConservacaoScreenNoTransition();
}

void Conservar_ResfriarViewBase::cANCELAR_PROCESSO1NaoCallbackHandler()
{
    //Nao
    //When cANCELAR_PROCESSO1 nao execute C++ code
    //Execute C++ code
    ContainerVisibility(&cANCELAR_PROCESSO1, false);
    SoundBuzzerOn(25);
}

void Conservar_ResfriarViewBase::handleTickEvent()
{
    //HandleTickEvent
    //When handleTickEvent is called execute C++ code
    //Execute C++ code
    if ((touchgfx::Unicode::atoi(textAreaStatusPortaBuffer)) == 1){
    	imageStatusPorta.setVisible(true);
    }else{
    	imageStatusPorta.setVisible(false);
    }
    invalidate();
    W_1_4553 = imageStatusPorta.isVisible();
    
    VisibilityBox(&boxFlagProcessoAndamento, flag_Conservar_ANDAMENTO);
    if (countCycleBlink > 1000)
    {
    	countCycleBlink = 0;
    	
    	if (flag_Conservar_ANDAMENTO)
    		VisibilityTextArea(&textAreaFlagProcessoAndamento, !textAreaFlagProcessoAndamento.isVisible());
    	else
    		Update(&textAreaFlagProcessoAndamento, textAreaFlagProcessoAndamentoBuffer, "Finalizado!", 20);
    }
    countCycleBlink += 16;
}

void Conservar_ResfriarViewBase::tearDownScreen()
{
    //TearDownScreen
    //When tearDownScreen is called execute C++ code
    //Execute C++ code
    Clear();
    ClearOthers();
}

void Conservar_ResfriarViewBase::writeModbus(char const* address, double value)
{
    //WriteModbus
    //When writeModbus is called execute C++ code
    //Execute C++ code
    UpdateModbus485(address, value, _INT_);
    WriteModbus485(address, 1);
    Wait(50);
}

void Conservar_ResfriarViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonCancelarProcesso)
    {
        //Voltar
        //When buttonCancelarProcesso clicked execute C++ code
        //Execute C++ code
        ContainerVisibility(&cANCELAR_PROCESSO1, true);
        SoundBuzzerOn(25);
    }
}
