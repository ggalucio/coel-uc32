/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/TimingApplicationBase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TimingApplicationBase::TimingApplicationBase()
{
    setWidth(480);
    setHeight(272);
    textArea512.setXY(0, 125);
    textArea512.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea512.setLinespacing(0);
    Unicode::snprintf(textArea512Buffer, TEXTAREA512_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4179).getText());
    textArea512.setWildcard(textArea512Buffer);
    textArea512.resizeToCurrentText();
    textArea512.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4178));

    textArea645.setXY(0, 50);
    textArea645.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea645.setLinespacing(0);
    Unicode::snprintf(textArea645Buffer, TEXTAREA645_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4177).getText());
    textArea645.setWildcard(textArea645Buffer);
    textArea645.resizeToCurrentText();
    textArea645.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4176));

    textArea10282.setXY(0, 125);
    textArea10282.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea10282.setLinespacing(0);
    Unicode::snprintf(textArea10282Buffer, TEXTAREA10282_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4175).getText());
    textArea10282.setWildcard(textArea10282Buffer);
    textArea10282.resizeToCurrentText();
    textArea10282.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4174));

    textArea10242.setXY(0, 100);
    textArea10242.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea10242.setLinespacing(0);
    Unicode::snprintf(textArea10242Buffer, TEXTAREA10242_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4173).getText());
    textArea10242.setWildcard(textArea10242Buffer);
    textArea10242.resizeToCurrentText();
    textArea10242.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4172));

    textArea515.setXY(0, 75);
    textArea515.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea515.setLinespacing(0);
    Unicode::snprintf(textArea515Buffer, TEXTAREA515_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4171).getText());
    textArea515.setWildcard(textArea515Buffer);
    textArea515.resizeToCurrentText();
    textArea515.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4170));

    textArea554.setXY(0, 0);
    textArea554.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea554.setLinespacing(0);
    Unicode::snprintf(textArea554Buffer, TEXTAREA554_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4169).getText());
    textArea554.setWildcard(textArea554Buffer);
    textArea554.resizeToCurrentText();
    textArea554.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4168));

    textArea553.setXY(0, 25);
    textArea553.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea553.setLinespacing(0);
    Unicode::snprintf(textArea553Buffer, TEXTAREA553_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4167).getText());
    textArea553.setWildcard(textArea553Buffer);
    textArea553.resizeToCurrentText();
    textArea553.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4166));

    add(textArea512);
    add(textArea645);
    add(textArea10282);
    add(textArea10242);
    add(textArea515);
    add(textArea554);
    add(textArea553);
}

void TimingApplicationBase::initialize()
{

}

void TimingApplicationBase::init()
{
    //Initialize
    //When init is called execute C++ code
    //Execute C++ code
    ReadWriteModbus485(&textArea553, textArea553Buffer, "553", 0, _INT_, REPEAT);
    ReadWriteModbus485(&textArea554, textArea554Buffer, "554", 0, _DOUBLE_, REPEAT);
    ReadWriteModbus485(&textArea515, textArea515Buffer, "515", 0, _DOUBLE_, REPEAT);
    ReadWriteModbus485(&textArea10242, textArea10242Buffer, "10242", 0, _DOUBLE_, REPEAT);
    ReadWriteModbus485(&textArea10282, textArea10282Buffer, "10282", 0, _DOUBLE_, REPEAT);
    ReadWriteModbus485(&textArea645, textArea645Buffer, "645", 0, _DOUBLE_, REPEAT);
    ReadWriteModbus485(&textArea512, textArea512Buffer, "512", 1, _DOUBLE_, REPEAT);
}

void TimingApplicationBase::finalize()
{

}

void TimingApplicationBase::cycle50()
{
    //Cycle50
    //When cycle50 is called execute C++ code
    //Execute C++ code
    
    
    W_1_4512 = GetFormatToNegative(GetNumberTextArea(textArea512Buffer), 16);
    
    
    
    
    
    
    
    
    Timer_COUNT_MINUTOS = Timer_Congelar_DECORRIDO_COUNT / 6;	// Transforma contagem decorrido em minutos
    Timer_Degelo_COUNT_MINUTOS = Timer_degelo_COUNT / 6; 		// Transforma contagem decorrido em minutos
    Timer_higiene_MIN = Timer_higiene_COUNT / 6;  			// Transforma contagem decorrido em minutos
    
    if (GetNumberTextArea(textArea553Buffer) != 0)
    {
    	Status_Porta = 1;
    	flag_porta = true;
    }
    else
    {
    	Status_Porta = 0;
    	flag_porta = false;
    }
}

void TimingApplicationBase::cycle500()
{
    //Cycle500
    //When cycle500 is called execute C++ code
    //Execute C++ code
    // Monitoramento de estado da entrada digital 2
    int a;
    
    a = logica_entrada_digital2 * (int)(GetNumberTextArea(textArea554Buffer)); 	// Compara logica da entrada digital2 com o valor lido da dig2 do controlador
    
    if (a != 0 && flag_alarme_externo_andamento == 0)	// se logica_entrada2 <> status Dig2 and alarme_externo_andamento=0 (indica que estava sem alarme)
    	flag_alarme_externo = 1;				// bit flag de alarme ativo
    
    if (a == 0 && flag_alarme_externo_andamento == 1) 	// se logica_entrada2 <> status Dig2 and alarme_externo_andamento=0 (indica que estava sem alarme)
    	Timer_alarme_externo_ON = 1;			// Start timer de retorno sa√≠da da tela de alarme externo
}

void TimingApplicationBase::cycle25()
{
    //Cycle25
    //When cycle25 is called execute C++ code
    //Execute C++ code
    	int a, b, c, d, spi1, spe1, spi2, spe2;
    
    	if (Status_tecla_Congela == 1 || Status_tecla_Congela == 3){
    		b = (uint16_t)(GetNumberTextArea(textArea515Buffer));		// b = valor Pr3
    	}
    	else{
    		c = (uint16_t)(GetNumberTextArea(textArea515Buffer));		// c = valor Pr3
    		d = (uint16_t)Temperatura_Receita_ATUAL;			// d = Temperatura_receita_ATUAL
    	}
    
    
    	// *********************
    
    	if (Status_tecla_Congela == 1) 				// if modo COngelar
    		a = (int16_t)CONGELAR_SONDA_SP;			// a= SP congelar SOnda
    
    	if (Status_tecla_Congela == 3){ 			// if modo resfriar
    		a = (int16_t)SP_Resfriar_Sonda;			// a= SP Resfriar SOnda
    
    		spe1 = (int16_t)SP_Resf_Espeto_F1;		// SPe1 = signedint16 (SP_REsf_Espeto_F1)
    		spe2 = (int16_t)SP_Resf_Espeto_F2;		// SPe2 = signedint16 (SP_Resf_Espeto_F2)
    	}
    
    	// *********************
    
    	// Modo COngelar
    	if (flag_Processo_ANDAMENTO == 1 && Status_tecla_Congela == 1 && Timer_delay_OUT == 1){		// IF flag_processo_Andamento=1 and CONGELAR_Modo_SONDA and Timer_Delay_out
    		if (b <= a){												// IF PR3<=SP
    			Tempo_estimado_Congelar_SONDA = Timer_COUNT_MINUTOS;	// Tempo_estimado_ongelar_SONDA = Timer_COngelar_COUNT_MINUTOS
    			Timer_Congelar_DECORRIDO_ON = 0;						// Timer_CONG_ON=0
    			Timer_Congelar_DECORRIDO_OUT = 1;						// Timer_CONG_OUT=1
    		}
    	}
    
    
    	// Modo Resfriar
    	if (flag_Processo_ANDAMENTO == 1 && Status_tecla_Congela == 3 && Timer_delay_OUT == 1){		// IF flag_processo_Andamento=1 and Resfriar_Modo_SONDA
    
    		 if (flag_Resfriar_HARD_SOFT == false){ // SE MODO SOFT
    			if (b <= a){							// IF PR3<=SP
    				Tempo_estimado_Resfriar_Sonda = Timer_COUNT_MINUTOS;	// Tempo estimado Resfriar
    				Timer_Congelar_DECORRIDO_ON = 0;						// Timer_CONG_ON=0
    				Timer_Congelar_DECORRIDO_OUT = 1;						// Timer_CONG_OUT=1
    			}
    		}
    		else{ // SE MODO HARD
    		 	if (b <= spe1 && Hard_Resf_fase_numero == 1){ // IF PR3<=SPe1 And Fase 1
    				//Beep()
    				Hard_Resf_fase_numero = 2;
    
    				//@W_1:410242 = @SP_Resf_Interno_F2					' SP X34 = SP_Interno_F2_Processo
    				//@W_1:410282 = @Dif_Resf_Hard_F2						' Diferencial X34 = diferencial fase 2
    				//@W_1:4645 = 1											' Controlador em modo COntrole
    					
    				if (GetNumberTextArea(textArea10242Buffer) != SP_Resf_Interno_F2)
    					writeModbus("10242", SP_Resf_Interno_F2);
    
    				if (GetNumberTextArea(textArea10282Buffer) != Dif_Resf_Hard_F2)
    					writeModbus("10282", Dif_Resf_Hard_F2);
    
    				if (GetNumberTextArea(textArea645Buffer) != 1)
    					writeModbus("645", 1);
    
    				
    				SP_Resf_Hard_Interno_display =  SP_Resf_Interno_F2;
    				SP_Resf_Hard_Espeto_display = SP_Resf_Espeto_F2;
    
    		 	}
    
    			if (b <= spe2 && Hard_Resf_fase_numero == 2){ // IF PR3<=SPe2 And Fase 2
    				Hard_Resf_fase_numero = 0;
    
    				Tempo_estimado_Resfriar_Sonda = Timer_COUNT_MINUTOS;	// Tempo estimado Resfriar
    				Timer_Congelar_DECORRIDO_ON = 0;						// Timer_CONG_ON=0
    				Timer_Congelar_DECORRIDO_OUT = 1;						// Timer_CONG_OUT=1
    			}
    
    		}
    	}
    
    	// Modo Receita
    	if (flag_Processo_ANDAMENTO == 1 && Status_tecla_Congela == 0 and Timer_delay_OUT == 1){		// IF flag_processo_Andamento=1 and Resfriar_Modo_SONDA (receita)
    		if (c <= d){												// IF PR3<=SP
    			Tempo_Estimado_Receita_Temperat = Timer_COUNT_MINUTOS;	// Tempo estimado Resfriar
    			Timer_Congelar_DECORRIDO_ON = 0;						// Timer_CONG_ON=0
    			Timer_Congelar_DECORRIDO_OUT = 1;						// Timer_CONG_OUT=1
    		}
    	}
    
    	// MODO Resfriar Tempo
    	if (flag_Processo_ANDAMENTO == 1 && Status_tecla_Congela == 4){		// IF flag_processo_Andamento=1 and Resfriar_Modo_ TEMPO
    		if (flag_Resfriar_HARD_SOFT == true && Timer_Congelar_DECORRIDO_ON == 1){ // SE MODO HARD
    			if (Timer_Congelar_DECORRIDO_COUNT == Preset_Resf_Tempo_F1){
    
    				if (xBeep_once == false){
    					//Beep()
    					xBeep_once = true;
    				}
    
    				Hard_Resf_fase_numero = 2;
    
    				//@W_1:410242 = @SP_Resf_Interno_F2					// SP X34 = SP_Interno_F2_Processo
    				//@W_1:410282 = @Dif_Resf_Hard_F2					// Diferencial X34 = diferencial fase 2
    				//@W_1:4645 = 1										// Controlador em modo COntrole
    				
    				if (GetNumberTextArea(textArea10242Buffer) != SP_Resf_Interno_F2)
    					writeModbus("10242", SP_Resf_Interno_F2);
    
    				if (GetNumberTextArea(textArea10282Buffer) != Dif_Resf_Hard_F2)
    					writeModbus("10282", Dif_Resf_Hard_F2);
    
    				if (GetNumberTextArea(textArea645Buffer) != 1)
    					writeModbus("645", 1);
    					
    				SP_Resf_Hard_Interno_display =  SP_Resf_Interno_F2;
    			}
    		}
    	}
}

void TimingApplicationBase::timer_1S()
{
    //TIMER_1S
    //When timer_1S is called execute C++ code
    //Execute C++ code
    	// TIMER BUZZER
    	if (Timer_buzzer_ON == 1){
    		if (Timer_Buzzer_COUNT >= Timer_buzzer_SP - 1)
    			Timer_BUzzer_OUT = true;
    		else
    			Timer_Buzzer_COUNT = Timer_Buzzer_COUNT + 1;
    	}
    	else
    		Timer_Buzzer_COUNT = 0;
    
    	// TIMER BUZZER DEGELO
    	if (Timer_buzzer_DEG_ON == 1){
    		if (Timer_Buzzer_DEG_COUNT >= Timer_buzzer_SP - 1)
    			Timer_BUzzer_DEG_OUT = true;
    		else
    			Timer_Buzzer_DEG_COUNT = Timer_Buzzer_DEG_COUNT + 1;
    	}
    	else
    		Timer_Buzzer_DEG_COUNT = 0;
    
    	// TIMER DELAY
    	if (Timer_delay_ON == 1){
    		if (Timer_Delay_COUNT >= Timer_Delay_SP - 1)
    			Timer_delay_OUT = true;
    		else
    			Timer_Delay_COUNT = Timer_Delay_COUNT  + 1;
    	}
    	else
    		Timer_Delay_COUNT = 0;
    
    	// TImer Degelo Delay
    	if (Timer_degelo_delay_ON == 1){
    		if (Timer_degelo_delay_COUNT >= Timer_degelo_delay_SP - 1)
    			Timer_degelo_delay_OUT = true;
    		else
    			Timer_degelo_delay_COUNT = Timer_degelo_delay_COUNT + 1;
    	}
    	else
    		Timer_degelo_delay_COUNT = 0;
    
    	// VERIFICA TIMERS 10 SEG PARA RESET
    
    	// TIMER DEGELO
    	if (Timer_Degelo_CONTROL == 0)
    		Timer_degelo_COUNT  = 0;
    
    	// TIMER PROCESSO DECORRIDO
    	if (Timer_Congelar_DECORRIDO_ON == 0)
    		Timer_Congelar_DECORRIDO_COUNT = 0;
    
    	// TIMER ALARME EXTERNO
    	if (Timer_alarme_externo_ON == 0)
    		Timer_Alarme_externo_COUNT = 0;
    
    	// TIMER HIGIENE
    	if (timer_higiene_ON == 0)
    		Timer_higiene_COUNT = 0;
}

void TimingApplicationBase::timer_10S()
{
    //TIMER_10S
    //When timer_10S is called execute C++ code
    //Execute C++ code
    	// TIMER DEGELO
    	if (Timer_Degelo_CONTROL == 1){
    		if (Timer_degelo_COUNT >= Timer_Degelo_SP -1)
    			Timer_Degelo_OUT = true;
    		else
    			Timer_degelo_COUNT = Timer_degelo_COUNT + 1;
    	}
    	else
    		Timer_degelo_COUNT = 0;
    
    	// TIMER PROCESSO DECORRIDO
    	if (Timer_Congelar_DECORRIDO_ON == 1){
    		if (Timer_Congelar_DECORRIDO_COUNT >= Timer_Congelar_DECORRIDO_SP -1)
    			Timer_Congelar_DECORRIDO_OUT = true;
    		else
    			Timer_Congelar_DECORRIDO_COUNT = Timer_Congelar_DECORRIDO_COUNT + 1;
    	}
    	else
    		Timer_Congelar_DECORRIDO_COUNT = 0;
    
    	// TIMER ALARME EXTERNO
    	if (Timer_alarme_externo_ON == 1){
    		if (Timer_Alarme_externo_COUNT >= Timer_Alarme_externo_SP - 1)
    			Timer_alarme_externo_OUT = true;
    		else
    			Timer_Alarme_externo_COUNT = Timer_Alarme_externo_COUNT + 1;
    	}
    	else
    		Timer_Alarme_externo_COUNT = 0;
    
    
    
    	// TIMER HIGIENE
    	if (timer_higiene_ON == 1){
    		if (Timer_higiene_COUNT >= 65000 -1)
    			timer_higiene_OUT = true;
    		else
    			Timer_higiene_COUNT = Timer_higiene_COUNT + 1;
    	}
    	else
    		Timer_higiene_COUNT = 0;
}

void TimingApplicationBase::writeModbus(char const* address, double value)
{
    //WriteModbus
    //When writeModbus is called execute C++ code
    //Execute C++ code
    UpdateModbus485(address, value, _INT_);
    WriteModbus485(address, 1);
    Wait(50);
}

