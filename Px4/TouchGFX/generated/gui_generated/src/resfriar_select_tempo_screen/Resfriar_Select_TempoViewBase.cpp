/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/resfriar_select_tempo_screen/Resfriar_Select_TempoViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Resfriar_Select_TempoViewBase::Resfriar_Select_TempoViewBase() :
    buttonCallback(this, &Resfriar_Select_TempoViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &Resfriar_Select_TempoViewBase::flexButtonCallbackHandler),
    numKeyboardContainer1OutOfRangeCallback(this, &Resfriar_Select_TempoViewBase::numKeyboardContainer1OutOfRangeCallbackHandler),
    numKeyboardContainer1ValidRangeCallback(this, &Resfriar_Select_TempoViewBase::numKeyboardContainer1ValidRangeCallbackHandler),
    numKeyboardContainer1HideKeypadTriggerCallback(this, &Resfriar_Select_TempoViewBase::numKeyboardContainer1HideKeypadTriggerCallbackHandler),
    numKeyboardContainer1EnterCallback(this, &Resfriar_Select_TempoViewBase::numKeyboardContainer1EnterCallbackHandler),
    timerCycle1sTickCallback(this, &Resfriar_Select_TempoViewBase::timerCycle1sTickCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    boxFundo.setPosition(0, 0, 480, 272);
    boxFundo.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    boxFundoAzul.setPosition(0, 0, 480, 53);
    boxFundoAzul.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));

    boxFundoMinutos.setPosition(123, 128, 166, 54);
    boxFundoMinutos.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));

    textAreaTitle.setXY(5, 8);
    textAreaTitle.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaTitle.setLinespacing(0);
    textAreaTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3858));

    textAreaUnidade.setXY(302, 137);
    textAreaUnidade.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaUnidade.setLinespacing(0);
    textAreaUnidade.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3859));

    textAreaTimerSpMinutosResfriar.setPosition(123, 128, 166, 54);
    textAreaTimerSpMinutosResfriar.setColor(touchgfx::Color::getColorFromRGB(240, 240, 240));
    textAreaTimerSpMinutosResfriar.setLinespacing(0);
    Unicode::snprintf(textAreaTimerSpMinutosResfriarBuffer, TEXTAREATIMERSPMINUTOSRESFRIAR_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3861).getText());
    textAreaTimerSpMinutosResfriar.setWildcard(textAreaTimerSpMinutosResfriarBuffer);
    textAreaTimerSpMinutosResfriar.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3860));

    buttonWithLabelIncrementar.setXY(173, 70);
    buttonWithLabelIncrementar.setBitmaps(touchgfx::Bitmap(BITMAP_VAZIO_ID), touchgfx::Bitmap(BITMAP_VAZIO_ID));
    buttonWithLabelIncrementar.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3862));
    buttonWithLabelIncrementar.setLabelColor(touchgfx::Color::getColorFromRGB(42, 106, 162));
    buttonWithLabelIncrementar.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabelIncrementar.setAction(buttonCallback);

    buttonWithLabelDecrementar.setXY(173, 188);
    buttonWithLabelDecrementar.setBitmaps(touchgfx::Bitmap(BITMAP_VAZIO_ID), touchgfx::Bitmap(BITMAP_VAZIO_ID));
    buttonWithLabelDecrementar.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3863));
    buttonWithLabelDecrementar.setLabelColor(touchgfx::Color::getColorFromRGB(42, 106, 162));
    buttonWithLabelDecrementar.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabelDecrementar.setAction(buttonCallback);

    toggleButtonFlagResfriarHardSoft.setXY(406, 136);
    toggleButtonFlagResfriarHardSoft.setBitmaps(touchgfx::Bitmap(BITMAP_SOFT_ID), touchgfx::Bitmap(BITMAP_HARD_ID));
    toggleButtonFlagResfriarHardSoft.setAction(buttonCallback);

    textAreaTempoZero.setXY(15, 65);
    textAreaTempoZero.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textAreaTempoZero.setLinespacing(0);
    textAreaTempoZero.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4023));

    buttonFlagCongelarTempo.setXY(406, 208);
    buttonFlagCongelarTempo.setBitmaps(touchgfx::Bitmap(BITMAP_AVANCE_ID), touchgfx::Bitmap(BITMAP_AVANCEON_ID));
    buttonFlagCongelarTempo.setAction(buttonCallback);

    buttonResfriar.setXY(406, 64);
    buttonResfriar.setBitmaps(touchgfx::Bitmap(BITMAP_VOLTAR_ID), touchgfx::Bitmap(BITMAP_VOLTAR_ID));
    buttonResfriar.setAction(buttonCallback);

    flexButtonTempo.setBoxWithBorderPosition(0, 0, 166, 54);
    flexButtonTempo.setBorderSize(5);
    flexButtonTempo.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexButtonTempo.setPosition(123, 128, 166, 54);
    flexButtonTempo.setAlpha(0);
    flexButtonTempo.setAction(flexButtonCallback);

    numKeyboardContainer1.setXY(0, 0);
    numKeyboardContainer1.setVisible(false);
    numKeyboardContainer1.setOutOfRangeCallback(numKeyboardContainer1OutOfRangeCallback);
    numKeyboardContainer1.setValidRangeCallback(numKeyboardContainer1ValidRangeCallback);
    numKeyboardContainer1.setHideKeypadTriggerCallback(numKeyboardContainer1HideKeypadTriggerCallback);
    numKeyboardContainer1.setEnterCallback(numKeyboardContainer1EnterCallback);

    background1.setXY(0, 0);

    timerCycle1s.setXY(0, 0);
    timerCycle1s.setVisible(false);
    timerCycle1s.setTickCallback(timerCycle1sTickCallback);

    add(__background);
    add(boxFundo);
    add(boxFundoAzul);
    add(boxFundoMinutos);
    add(textAreaTitle);
    add(textAreaUnidade);
    add(textAreaTimerSpMinutosResfriar);
    add(buttonWithLabelIncrementar);
    add(buttonWithLabelDecrementar);
    add(toggleButtonFlagResfriarHardSoft);
    add(textAreaTempoZero);
    add(buttonFlagCongelarTempo);
    add(buttonResfriar);
    add(flexButtonTempo);
    add(numKeyboardContainer1);
    add(background1);
    add(timerCycle1s);
}

void Resfriar_Select_TempoViewBase::setupScreen()
{
    numKeyboardContainer1.initialize();
    background1.initialize();
    timerCycle1s.initialize();
    //ScreenTransitionBegins
    //When screen transition begins execute C++ code
    //Execute C++ code
    WriteModbus485(10282, 1);
    WriteModbus485(10242, 1);
    WriteModbus485(645, 1);
    
    Update(&textAreaTimerSpMinutosResfriar, textAreaTimerSpMinutosResfriarBuffer, Timer_SP_MINUTOS_Resfriar, _INT_, 0);
    Update(&toggleButtonFlagResfriarHardSoft, flag_Resfriar_HARD_SOFT);
    VisibilityTextArea(&textAreaTempoZero, false);
    
    timerCycle1s.setWaitTime(1000);
    timerCycle1s.start();

}

//Called when the screen transition ends
void Resfriar_Select_TempoViewBase::afterTransition()
{
    //ScreenTransitionEnds
    //When screen transition ends execute C++ code
    //Execute C++ code
    SoundBuzzerOn(25);
}

void Resfriar_Select_TempoViewBase::numKeyboardContainer1OutOfRangeCallbackHandler()
{
    //OutOfRangeFIred
    //When numKeyboardContainer1 OutOfRange call OutOfRangeMsg on numKeyboardContainer1
    //Call OutOfRangeMsg
    numKeyboardContainer1.OutOfRangeMsg();
}

void Resfriar_Select_TempoViewBase::numKeyboardContainer1ValidRangeCallbackHandler()
{
    //InsideRangeFired
    //When numKeyboardContainer1 ValidRange call InputValidRange on numKeyboardContainer1
    //Call InputValidRange
    numKeyboardContainer1.InputValidRange();
}

void Resfriar_Select_TempoViewBase::numKeyboardContainer1HideKeypadTriggerCallbackHandler()
{
    //HideNumKeyboard
    //When numKeyboardContainer1 HideKeypadTrigger execute C++ code
    //Execute C++ code
    ContainerVisibility(&numKeyboardContainer1, false);
    SoundBuzzerOn(25);
}

void Resfriar_Select_TempoViewBase::numKeyboardContainer1EnterCallbackHandler(double value)
{
    //EnterKeyboard
    //When numKeyboardContainer1 Enter execute C++ code
    //Execute C++ code
    Timer_SP_MINUTOS_Resfriar = value;
}

void Resfriar_Select_TempoViewBase::timerCycle1sTickCallbackHandler()
{
    //Cycle_1s
    //When timerCycle1s tick execute C++ code
    //Execute C++ code
    VisibilityTextArea(&textAreaTempoZero, flag_alarm_receita_vazia && !textAreaTempoZero.isVisible());
}

void Resfriar_Select_TempoViewBase::tearDownScreen()
{
    //TearDownScreen
    //When tearDownScreen is called execute C++ code
    //Execute C++ code
    Clear();
}

void Resfriar_Select_TempoViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabelIncrementar)
    {
        //Incrementar
        //When buttonWithLabelIncrementar clicked execute C++ code
        //Execute C++ code
        Increase(&textAreaTimerSpMinutosResfriar, textAreaTimerSpMinutosResfriarBuffer, 1, 0, 9999, _INT_, 0);
        Timer_SP_MINUTOS_Resfriar = GetNumberTextArea(textAreaTimerSpMinutosResfriarBuffer);
        SoundBuzzerOn(25);
    }
    else if (&src == &buttonWithLabelDecrementar)
    {
        //Decrementar
        //When buttonWithLabelDecrementar clicked execute C++ code
        //Execute C++ code
        Decrease(&textAreaTimerSpMinutosResfriar, textAreaTimerSpMinutosResfriarBuffer, 1, 0, 9999, _INT_, 0);
        Timer_SP_MINUTOS_Resfriar = GetNumberTextArea(textAreaTimerSpMinutosResfriarBuffer);
        SoundBuzzerOn(25);
    }
    else if (&src == &toggleButtonFlagResfriarHardSoft)
    {
        //SoftHard
        //When toggleButtonFlagResfriarHardSoft clicked execute C++ code
        //Execute C++ code
        flag_Resfriar_HARD_SOFT = toggleButtonFlagResfriarHardSoft.getState();
        SoundBuzzerOn(25);
    }
    else if (&src == &buttonFlagCongelarTempo)
    {
        //Avancar
        //When buttonFlagCongelarTempo clicked execute C++ code
        //Execute C++ code
        flag_congelar_Tempo = true;
    }
    else if (&src == &buttonResfriar)
    {
        //Voltar
        //When buttonResfriar clicked change screen to Resfriar
        //Go to Resfriar with no screen transition
        application().gotoResfriarScreenNoTransition();
    }
}

void Resfriar_Select_TempoViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButtonTempo)
    {
        //DigitarTempo
        //When flexButtonTempo clicked execute C++ code
        //Execute C++ code
        AddNumKeyboardReference(&textAreaTimerSpMinutosResfriar, textAreaTimerSpMinutosResfriarBuffer, 0, 9999, _INT_, 0, 0);
        ContainerVisibility(&numKeyboardContainer1, true);
        SoundBuzzerOn(25);

        //LaunchDigitarTempoKeyboard
        //When DigitarTempo completed call LaunchNumericalKeyboard on numKeyboardContainer1
        //Call LaunchNumericalKeyboard
        numKeyboardContainer1.LaunchNumericalKeyboard();
    }
}
