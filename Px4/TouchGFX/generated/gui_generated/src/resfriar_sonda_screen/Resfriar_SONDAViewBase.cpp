/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/resfriar_sonda_screen/Resfriar_SONDAViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Resfriar_SONDAViewBase::Resfriar_SONDAViewBase() :
    buttonCallback(this, &Resfriar_SONDAViewBase::buttonCallbackHandler),
    cANCELAR_PROCESSO1CancelarProcessoCallback(this, &Resfriar_SONDAViewBase::cANCELAR_PROCESSO1CancelarProcessoCallbackHandler),
    cANCELAR_PROCESSO1NaoCallback(this, &Resfriar_SONDAViewBase::cANCELAR_PROCESSO1NaoCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    boxFundo.setPosition(0, 0, 480, 272);
    boxFundo.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    boxProcessOff.setPosition(5, 64, 392, 196);
    boxProcessOff.setColor(touchgfx::Color::getColorFromRGB(241, 241, 242));

    boxFlagProcessoAndamento.setPosition(5, 64, 392, 196);
    boxFlagProcessoAndamento.setVisible(false);
    boxFlagProcessoAndamento.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));

    boxFundoAzul.setPosition(0, 0, 480, 53);
    boxFundoAzul.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));

    boxWithBorderBox3.setPosition(66, 133, 324, 57);
    boxWithBorderBox3.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorderBox3.setBorderColor(touchgfx::Color::getColorFromRGB(26, 100, 160));
    boxWithBorderBox3.setBorderSize(1);

    boxWithBorderBox2.setPosition(66, 197, 324, 57);
    boxWithBorderBox2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorderBox2.setBorderColor(touchgfx::Color::getColorFromRGB(26, 100, 160));
    boxWithBorderBox2.setBorderSize(1);

    boxWithBorderBox1.setPosition(66, 70, 324, 57);
    boxWithBorderBox1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorderBox1.setBorderColor(touchgfx::Color::getColorFromRGB(26, 100, 160));
    boxWithBorderBox1.setBorderSize(1);

    boxFundoAzul2.setPosition(181, 105, 105, 19);
    boxFundoAzul2.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));

    textAreaUnidade2.setXY(337, 134);
    textAreaUnidade2.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaUnidade2.setLinespacing(0);
    textAreaUnidade2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3838));

    textAreaUnidade3.setXY(337, 199);
    textAreaUnidade3.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaUnidade3.setLinespacing(0);
    textAreaUnidade3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3839));

    textAreaUnidade1.setXY(353, 71);
    textAreaUnidade1.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaUnidade1.setLinespacing(0);
    textAreaUnidade1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3840));

    textAreaTitle.setXY(5, 8);
    textAreaTitle.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaTitle.setLinespacing(0);
    textAreaTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3841));

    buttonCancelarProcesso.setXY(406, 64);
    buttonCancelarProcesso.setBitmaps(touchgfx::Bitmap(BITMAP_VOLTAR_ID), touchgfx::Bitmap(BITMAP_VOLTAR_ID));
    buttonCancelarProcesso.setAction(buttonCallback);

    toggleButtonFlagConservarSN.setXY(405, 208);
    toggleButtonFlagConservarSN.setBitmaps(touchgfx::Bitmap(BITMAP_CSVOFF_ID), touchgfx::Bitmap(BITMAP_CSVON_ID));
    toggleButtonFlagConservarSN.setAction(buttonCallback);

    imageSoft.setXY(406, 136);
    imageSoft.setBitmap(touchgfx::Bitmap(BITMAP_SOFT_ID));

    imageHard.setXY(405, 136);
    imageHard.setVisible(false);
    imageHard.setBitmap(touchgfx::Bitmap(BITMAP_HARD_ID));

    image1.setXY(25, 79);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_PAO_ID));

    image2.setXY(18, 209);
    image2.setBitmap(touchgfx::Bitmap(BITMAP_AMPULHETA_ID));

    image3.setXY(18, 146);
    image3.setBitmap(touchgfx::Bitmap(BITMAP_AMPULHETA_ID));

    textAreaFlagProcessoAndamento.setPosition(308, 14, 160, 25);
    textAreaFlagProcessoAndamento.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaFlagProcessoAndamento.setLinespacing(0);
    Unicode::snprintf(textAreaFlagProcessoAndamentoBuffer, TEXTAREAFLAGPROCESSOANDAMENTO_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4025).getText());
    textAreaFlagProcessoAndamento.setWildcard(textAreaFlagProcessoAndamentoBuffer);
    textAreaFlagProcessoAndamento.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4024));

    textAreaLabel1.setXY(73, 71);
    textAreaLabel1.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaLabel1.setLinespacing(0);
    textAreaLabel1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3842));

    textAreaLabel2.setXY(73, 136);
    textAreaLabel2.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaLabel2.setLinespacing(0);
    textAreaLabel2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3843));

    textAreaLabel3.setXY(73, 199);
    textAreaLabel3.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaLabel3.setLinespacing(0);
    textAreaLabel3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3844));

    textArea14515.setPosition(157, 69, 156, 58);
    textArea14515.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textArea14515.setLinespacing(0);
    Unicode::snprintf(textArea14515Buffer, TEXTAREA14515_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3846).getText());
    textArea14515.setWildcard(textArea14515Buffer);
    textArea14515.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3845));

    textAreaTimerCountMinutos.setPosition(172, 134, 121, 56);
    textAreaTimerCountMinutos.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaTimerCountMinutos.setLinespacing(0);
    Unicode::snprintf(textAreaTimerCountMinutosBuffer, TEXTAREATIMERCOUNTMINUTOS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3848).getText());
    textAreaTimerCountMinutos.setWildcard(textAreaTimerCountMinutosBuffer);
    textAreaTimerCountMinutos.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3847));

    textAreaTempoEstimadoResfriarSonda.setPosition(172, 199, 121, 55);
    textAreaTempoEstimadoResfriarSonda.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaTempoEstimadoResfriarSonda.setLinespacing(0);
    Unicode::snprintf(textAreaTempoEstimadoResfriarSondaBuffer, TEXTAREATEMPOESTIMADORESFRIARSONDA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3851).getText());
    textAreaTempoEstimadoResfriarSonda.setWildcard(textAreaTempoEstimadoResfriarSondaBuffer);
    textAreaTempoEstimadoResfriarSonda.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3850));

    textArea14512.setPosition(328, 102, 56, 18);
    textArea14512.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textArea14512.setLinespacing(0);
    Unicode::snprintf(textArea14512Buffer, TEXTAREA14512_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3853).getText());
    textArea14512.setWildcard(textArea14512Buffer);
    textArea14512.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3852));

    textAreaTimerCongelarDecorridoCount.setPosition(328, 165, 56, 18);
    textAreaTimerCongelarDecorridoCount.setColor(touchgfx::Color::getColorFromRGB(0, 175, 239));
    textAreaTimerCongelarDecorridoCount.setLinespacing(0);
    Unicode::snprintf(textAreaTimerCongelarDecorridoCountBuffer, TEXTAREATIMERCONGELARDECORRIDOCOUNT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3855).getText());
    textAreaTimerCongelarDecorridoCount.setWildcard(textAreaTimerCongelarDecorridoCountBuffer);
    textAreaTimerCongelarDecorridoCount.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3854));

    textAreaSpResfHardEspetoDisplay.setPosition(181, 105, 105, 18);
    textAreaSpResfHardEspetoDisplay.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaSpResfHardEspetoDisplay.setLinespacing(0);
    Unicode::snprintf(textAreaSpResfHardEspetoDisplayBuffer, TEXTAREASPRESFHARDESPETODISPLAY_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3857).getText());
    textAreaSpResfHardEspetoDisplay.setWildcard(textAreaSpResfHardEspetoDisplayBuffer);
    textAreaSpResfHardEspetoDisplay.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3856));

    cANCELAR_PROCESSO1.setXY(0, 0);
    cANCELAR_PROCESSO1.setVisible(false);
    cANCELAR_PROCESSO1.setCancelarProcessoCallback(cANCELAR_PROCESSO1CancelarProcessoCallback);
    cANCELAR_PROCESSO1.setNaoCallback(cANCELAR_PROCESSO1NaoCallback);

    imageStatusPorta.setXY(200, 0);
    imageStatusPorta.setVisible(false);
    imageStatusPorta.setBitmap(touchgfx::Bitmap(BITMAP_PORTA_ID));

    textAreaStatusPorta.setXY(98, 13);
    textAreaStatusPorta.setVisible(false);
    textAreaStatusPorta.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaStatusPorta.setLinespacing(0);
    Unicode::snprintf(textAreaStatusPortaBuffer, TEXTAREASTATUSPORTA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4124).getText());
    textAreaStatusPorta.setWildcard(textAreaStatusPortaBuffer);
    textAreaStatusPorta.resizeToCurrentText();
    textAreaStatusPorta.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4123));

    add(__background);
    add(boxFundo);
    add(boxProcessOff);
    add(boxFlagProcessoAndamento);
    add(boxFundoAzul);
    add(boxWithBorderBox3);
    add(boxWithBorderBox2);
    add(boxWithBorderBox1);
    add(boxFundoAzul2);
    add(textAreaUnidade2);
    add(textAreaUnidade3);
    add(textAreaUnidade1);
    add(textAreaTitle);
    add(buttonCancelarProcesso);
    add(toggleButtonFlagConservarSN);
    add(imageSoft);
    add(imageHard);
    add(image1);
    add(image2);
    add(image3);
    add(textAreaFlagProcessoAndamento);
    add(textAreaLabel1);
    add(textAreaLabel2);
    add(textAreaLabel3);
    add(textArea14515);
    add(textAreaTimerCountMinutos);
    add(textAreaTempoEstimadoResfriarSonda);
    add(textArea14512);
    add(textAreaTimerCongelarDecorridoCount);
    add(textAreaSpResfHardEspetoDisplay);
    add(cANCELAR_PROCESSO1);
    add(imageStatusPorta);
    add(textAreaStatusPorta);
}

void Resfriar_SONDAViewBase::setupScreen()
{
    cANCELAR_PROCESSO1.initialize();
    //ScreenTransitionBegins
    //When screen transition begins execute C++ code
    //Execute C++ code
    Clear();
    
    ReadWriteModbus485(&textAreaStatusPorta, textAreaStatusPortaBuffer, "553", 0, _INT_, REPEAT);
    
    ReadWriteModbus485(&textArea14515, textArea14515Buffer, "515", 1, _DOUBLE_, REPEAT);
    Update(&textAreaSpResfHardEspetoDisplay, textAreaSpResfHardEspetoDisplayBuffer, SP_Resf_Hard_Espeto_display / 10, _DOUBLE_, 1);
    ReadWriteModbus485(&textArea14512, textArea14512Buffer, "512", 1, _DOUBLE_, REPEAT);
    
    Update(&textAreaTimerCountMinutos, textAreaTimerCountMinutosBuffer, Timer_COUNT_MINUTOS, _INT_, 0);
    Update(&textAreaTimerCongelarDecorridoCount, textAreaTimerCongelarDecorridoCountBuffer, Timer_Congelar_DECORRIDO_COUNT, _INT_, 0);
    
    Update(&textAreaTempoEstimadoResfriarSonda, textAreaTempoEstimadoResfriarSondaBuffer, Tempo_estimado_Resfriar_Sonda, _INT_, 0);
    
    Update(&textAreaFlagProcessoAndamento, textAreaFlagProcessoAndamentoBuffer, "OPERANDO...", 20);
    countCycleBlink = 0;

}

//Called when the screen transition ends
void Resfriar_SONDAViewBase::afterTransition()
{
    //ScreenTransitionEnds
    //When screen transition ends execute C++ code
    //Execute C++ code
    SoundBuzzerOn(25);
}

void Resfriar_SONDAViewBase::cANCELAR_PROCESSO1CancelarProcessoCallbackHandler()
{
    //CancelarProcessoSim
    //When cANCELAR_PROCESSO1 cancelarProcesso execute C++ code
    //Execute C++ code
    flag_Processo_ANDAMENTO = true;
    
    
    if (flag_Processo_ANDAMENTO)
    {
    
    	if (Status_tecla_Congela == 0){		// Modo COngelar Sonda
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("10242", 999);		// SP = 99.9ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    			
    		W_HDW5000 = 19;			// Tela Receita
    			
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON	
    	}	
    
    	if (Status_tecla_Congela == 1){ 		// Modo COngelar Sonda
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("10242", 999);		// SP = 99.9ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    			
    		W_HDW5000 = 1;			// Tela Congelar Sonda
    			
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON	
    	}
    
    	if (Status_tecla_Congela == 2){		// Modo COngelar Tempo
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("10242", 999);		// SP = 99.9ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    		
    		W_HDW5000 = 1;	
    
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON	
    	}
    
    	if (Status_tecla_Congela == 3){		// Modo Resfriar Sonda
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("640", 0);		// Desliga Modo Turbo
    		writeModbus("10242", 999);		// SP = 99.9ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    		
    		W_HDW5000 = 10;
    
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON		
    	}
    
    	if (Status_tecla_Congela == 4){		// Modo Resfriar Tempo
    		flag_Processo_ANDAMENTO = false; 	// Zera flag_PROCESSO_ANDAMENTO
    		writeModbus("10242", 999);		// SP = 99ºC
    		writeModbus("645", 0);		// Controlador em Stand-By
    		
    		W_HDW5000 = 10;
    		
    		Timer_Congelar_DECORRIDO_ON = 0;	// Zera bit Timer_decorrido_ON
    	}
    
    	flag_Processo_ANDAMENTO = false;
    
    	// @Timer_buzzer_ON = 1;			// inicia Timer_Buzzer
    }
    else
    {
    	if (Status_tecla_Congela == 0){   					// if Receita Temperatura
    		W_HDW5000 = 19;							// Tela_Receita Temperatura
    	}						
    	if (Status_tecla_Congela == 1 || Status_tecla_Congela ==2){		// if Congelar_SONDA ou Congelar_Tempo
    		W_HDW5000 = 1;							// Tela_Congelar
    	}
    	if (Status_tecla_Congela == 3 || Status_tecla_Congela == 4){	// if @Status_tecla_Congela=3 or @Status_tecla_Congela=4
    		W_HDW5000 = 10;							// Tela_Resfriar
    	}
    
    }
    
    if (flag_Conservar_ANDAMENTO)
    {
    	if (Status_Conservar == 1){		// Conservar_Congelar
    		W_HDW5000 = 7;			// Tela Conservar
    		writeModbus("10242", 999);		// SP = 99ºC
    		writeModbus("645", 0);		// Controlador em modo Standby
    	}
    	
    	if (Status_Conservar == 2){		// Consewrvar_Resfriar
    		W_HDW5000 = 7;			// Tela COnservar
    		writeModbus("10242", 999);		// SP = 99ºC
    		writeModbus("645", 0);		// Controlador em modo Stand-by
    	}
    	
    	flag_Conservar_ANDAMENTO = 0;		// Zera flag_conservar_andamento
    
    	Timer_buzzer_ON = 1;			// inicia Timer_Buzzer
    }
    
    Timer_delay_OUT = 0;		// Zera Timer_delay_OUT
    
    cancelar_processo_SIM = false; 	// Zera bit cancelar_processo_SIM
    
    

    //CancelarProcesso
    //When CancelarProcessoSim completed change screen to Resfriar
    //Go to Resfriar with no screen transition
    application().gotoResfriarScreenNoTransition();
}

void Resfriar_SONDAViewBase::cANCELAR_PROCESSO1NaoCallbackHandler()
{
    //Nao
    //When cANCELAR_PROCESSO1 nao execute C++ code
    //Execute C++ code
    ContainerVisibility(&cANCELAR_PROCESSO1, false);
    SoundBuzzerOn(25);
}

void Resfriar_SONDAViewBase::handleTickEvent()
{
    //HandleTickEvent
    //When handleTickEvent is called execute C++ code
    //Execute C++ code
    if ((touchgfx::Unicode::atoi(textAreaStatusPortaBuffer)) == 1){
    	imageStatusPorta.setVisible(true);
    }else{
    	imageStatusPorta.setVisible(false);
    }
    invalidate();
    
    
    Update(&textAreaSpResfHardEspetoDisplay, textAreaSpResfHardEspetoDisplayBuffer, SP_Resf_Hard_Espeto_display / 10, _DOUBLE_, 1);
    Update(&textAreaTimerCountMinutos, textAreaTimerCountMinutosBuffer, Timer_COUNT_MINUTOS, _INT_, 0);
    Update(&textAreaTimerCongelarDecorridoCount, textAreaTimerCongelarDecorridoCountBuffer, Timer_Congelar_DECORRIDO_COUNT, _INT_, 0);
    Update(&textAreaTempoEstimadoResfriarSonda, textAreaTempoEstimadoResfriarSondaBuffer, Tempo_estimado_Resfriar_Sonda, _INT_, 0);
    
    VisibilityBox(&boxFlagProcessoAndamento, flag_Processo_ANDAMENTO);
    if (countCycleBlink > 1000)
    {
    	countCycleBlink = 0;
    	
    	if (flag_Processo_ANDAMENTO)
    		VisibilityTextArea(&textAreaFlagProcessoAndamento, !textAreaFlagProcessoAndamento.isVisible());
    	else
    		Update(&textAreaFlagProcessoAndamento, textAreaFlagProcessoAndamentoBuffer, "Finalizado!", 20);
    }
    countCycleBlink += 16;
}

void Resfriar_SONDAViewBase::tearDownScreen()
{
    //TearDownScreen
    //When tearDownScreen is called execute C++ code
    //Execute C++ code
    Clear();
    ClearOthers();
}

void Resfriar_SONDAViewBase::writeModbus(char const* address, double value)
{
    //WriteModbus
    //When writeModbus is called execute C++ code
    //Execute C++ code
    UpdateModbus485(address, value, _INT_);
    WriteModbus485(address, 1);
    Wait(50);
}

void Resfriar_SONDAViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonCancelarProcesso)
    {
        //Voltar
        //When buttonCancelarProcesso clicked execute C++ code
        //Execute C++ code
        ContainerVisibility(&cANCELAR_PROCESSO1, true);
        SoundBuzzerOn(25);
    }
    else if (&src == &toggleButtonFlagConservarSN)
    {
        //CSV
        //When toggleButtonFlagConservarSN clicked execute C++ code
        //Execute C++ code
        flag_Conservar_S_N = toggleButtonFlagConservarSN.getState();
        SoundBuzzerOn(25);
    }
}
