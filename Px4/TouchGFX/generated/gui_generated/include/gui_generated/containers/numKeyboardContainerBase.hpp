/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef NUMKEYBOARDCONTAINERBASE_HPP
#define NUMKEYBOARDCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <AT_module.hpp>

class numKeyboardContainerBase : public touchgfx::Container
{
public:
    numKeyboardContainerBase();
    virtual ~numKeyboardContainerBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setHideKeypadTriggerCallback(touchgfx::GenericCallback<>& callback)
    {
        this->HideKeypadTriggerCallback = &callback;
    }
    void setOutOfRangeCallback(touchgfx::GenericCallback<>& callback)
    {
        this->OutOfRangeCallback = &callback;
    }
    void setValidRangeCallback(touchgfx::GenericCallback<>& callback)
    {
        this->ValidRangeCallback = &callback;
    }
    void setEnterCallback(touchgfx::GenericCallback<>& callback)
    {
        this->EnterCallback = &callback;
    }

    /*
     * Custom Actions
     */
    virtual void LaunchNumericalKeyboard();
    virtual void OutOfRangeMsg();
    virtual void InputValidRange();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitHideKeypadTriggerCallback()
    {
        if (HideKeypadTriggerCallback && HideKeypadTriggerCallback->isValid())
        {
            this->HideKeypadTriggerCallback->execute();
        }
    }
    virtual void emitOutOfRangeCallback()
    {
        if (OutOfRangeCallback && OutOfRangeCallback->isValid())
        {
            this->OutOfRangeCallback->execute();
        }
    }
    virtual void emitValidRangeCallback()
    {
        if (ValidRangeCallback && ValidRangeCallback->isValid())
        {
            this->ValidRangeCallback->execute();
        }
    }
    virtual void emitEnterCallback()
    {
        if (EnterCallback && EnterCallback->isValid())
        {
            this->EnterCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger > backgroundFlexButton;
    touchgfx::Box backgroundBox;
    touchgfx::Box keyboardBox;
    touchgfx::BoxWithBorder textBox;
    touchgfx::TextAreaWithOneWildcard valTxt;
    touchgfx::Button dotBtn;
    touchgfx::Button delBtn;
    touchgfx::ButtonWithLabel zeroBtn;
    touchgfx::ButtonWithLabel oneBtn;
    touchgfx::ButtonWithLabel twoBtn;
    touchgfx::ButtonWithLabel threeBtn;
    touchgfx::ButtonWithLabel fourBtn;
    touchgfx::ButtonWithLabel fiveBtn;
    touchgfx::ButtonWithLabel sixBtn;
    touchgfx::ButtonWithLabel sevenBtn;
    touchgfx::ButtonWithLabel eightBtn;
    touchgfx::ButtonWithLabel nineBtn;
    touchgfx::ButtonWithLabel cancelBtn;
    touchgfx::ButtonWithLabel okBtn;
    touchgfx::ButtonWithLabel signBtn;
    touchgfx::ButtonWithLabel clearBtn;
    touchgfx::BoxWithBorder minBox;
    touchgfx::BoxWithBorder maxBox;
    touchgfx::TextArea minLbl;
    touchgfx::TextArea maxLbl;
    touchgfx::TextAreaWithOneWildcard minTxt;
    touchgfx::TextAreaWithOneWildcard maxTxt;
    touchgfx::TextArea errTxt;

    /*
     * Wildcard Buffers
     */
    static const uint16_t VALTXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar valTxtBuffer[VALTXT_SIZE];
    static const uint16_t MINTXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar minTxtBuffer[MINTXT_SIZE];
    static const uint16_t MAXTXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar maxTxtBuffer[MAXTXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<numKeyboardContainerBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<numKeyboardContainerBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* HideKeypadTriggerCallback;
    touchgfx::GenericCallback<>* OutOfRangeCallback;
    touchgfx::GenericCallback<>* ValidRangeCallback;
    touchgfx::GenericCallback<>* EnterCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // NUMKEYBOARDCONTAINERBASE_HPP
