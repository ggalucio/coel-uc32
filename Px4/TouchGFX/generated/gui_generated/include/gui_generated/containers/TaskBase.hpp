/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TASKBASE_HPP
#define TASKBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>

class TaskBase : public touchgfx::Container
{
public:
    TaskBase();
    virtual ~TaskBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setCallCallback(touchgfx::GenericCallback<>& callback)
    {
        this->callCallback = &callback;
    }
    void setBeginCallback(touchgfx::GenericCallback<>& callback)
    {
        this->beginCallback = &callback;
    }

    /*
     * Custom Actions
     */
    virtual void setWaitTime(uint32_t value);
    virtual void run();
    virtual void interrupt();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitCallCallback()
    {
        if (callCallback && callCallback->isValid())
        {
            this->callCallback->execute();
        }
    }
    virtual void emitBeginCallback()
    {
        if (beginCallback && beginCallback->isValid())
        {
            this->beginCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Image image1;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* callCallback;
    touchgfx::GenericCallback<>* beginCallback;

};

#endif // TASKBASE_HPP
