# Helper macros to convert spaces into question marks and back again
e :=
sp := $(e) $(e)
qs = $(subst ?,$(sp),$1)
sq = $(subst $(sp),?,$1)

# Get name of this Makefile (avoid getting word 0 and a starting space)
makefile_name := $(wordlist 1,1000,$(MAKEFILE_LIST))

# Get path of this Makefile
makefile_path := $(call qs,$(dir $(call sq,$(abspath $(call sq,$(makefile_name))))))

# Get path where the Application is
application_path := $(call qs,$(abspath $(call sq,$(makefile_path)..)))

# Change makefile_name to a relative path
makefile_name := $(subst $(call sq,$(application_path))/,,$(call sq,$(abspath $(call sq,$(makefile_name)))))

# Get relative path to makefile from application_path
makefile_path_relative := $(subst $(call sq,$(application_path))/,,$(call sq,$(abspath $(call sq,$(makefile_path)))))

# Get path to Middlewares
touchgfx_middlewares_path := gcc/Middlewares
cubemx_middlewares_path := Middlewares


# Get path to LWIP
LWIP_path := ../../../../../PG064/PG/SRC/APPLICAZIONE/Libraries/LwIP

# Get path to APPLICAZIONE
Common_path := ../../../../../PG064/PG/SRC/APPLICAZIONE
cubemx_os_path := ../../../../../PG064/PG/SRC/OS

startup_path := ../../../../../PG064/PG/SRC/STARTUP

# Get path to Drivers
Drivers_path :=$(Common_path)/Drivers

# Get path to USB
USB_path := $(Common_path)/Libraries/USB

# Get path to TouchGFX
TouchGFX_path := TouchGFX

# Get OS path
touchgfx_os_path := $(touchgfx_middlewares_path)/Third_Party/FreeRTOS
#cubemx_os_path := $(cubemx_middlewares_path)/Third_Party/FreeRTOS

# Get identification of this system
ifeq ($(OS),Windows_NT)
UNAME := MINGW32_NT-6.2
else
UNAME := $(shell uname -s)
endif

board_name := Px4
platform := cortex_m7
cpp_compiler_options_local := -DUSE_HAL_DRIVER -DSTM32F746xx
c_compiler_options_local := -DUSE_HAL_DRIVER -DSTM32F746xx

.PHONY: all clean assets flash intflash

all: $(filter clean,$(MAKECMDGOALS))
all clean assets:
	@cd "$(application_path)" && $(MAKE) -r -f $(makefile_name) -s $(MFLAGS) _$@_

flash intflash: all
	@cd "$(application_path)" && $(MAKE) -r -f $(makefile_name) -s $(MFLAGS) _$@_

# Directories containing application-specific source and header files.
# Additional components can be added to this list. make will look for
# source files recursively in comp_name/src and setup an include directive
# for comp_name/include.
components := TouchGFX/gui target TouchGFX/generated/gui_generated
touchgfx_generator_components := TouchGFX/target TouchGFX/App
cubemx_components := Core $(Common_path)/Drivers/STM32F7xx_HAL_Driver

# Location of folder containing bmp/png files.
asset_images_input  := TouchGFX/assets/images

# Location of folder to search for ttf font files
asset_fonts_input  := TouchGFX/assets/fonts

# Location of folder where the texts.xlsx is placed
asset_texts_input  := TouchGFX/assets/texts

build_root_path := TouchGFX/build
object_output_path := $(build_root_path)/$(board_name)
binary_output_path := $(build_root_path)/bin

# Location of output folders where autogenerated code from assets is placed
asset_root_path := TouchGFX/generated
asset_images_output := $(asset_root_path)/images
asset_fonts_output := $(asset_root_path)/fonts
asset_texts_output := $(asset_root_path)/texts

#include application specific configuration
include $(application_path)/TouchGFX/config/gcc/app.mk

# corrects TouchGFX Path
#touchgfx_path := $(Common_path)/GFX/touchgfx
touchgfx_path := ${subst ../,,$(touchgfx_path)}

os_source_files := \
    $(cubemx_os_path)/Source/croutine.c \
    $(cubemx_os_path)/Source/list.c \
    $(cubemx_os_path)/Source/queue.c \
    $(cubemx_os_path)/Source/tasks.c \
    $(cubemx_os_path)/Source/timers.c \
    $(cubemx_os_path)/Source/CMSIS_RTOS/cmsis_os.c

os_include_paths := \
    $(cubemx_os_path)/Source/include \
    $(cubemx_os_path)/Source/CMSIS_RTOS
   
os_source_files += \
   $(touchgfx_os_path)/Source/portable/MemMang/heap_4.c \
   $(touchgfx_os_path)/Source/portable/GCC/ARM_CM7/r0p1/port.c 
   
os_include_paths += \
   $(touchgfx_os_path)/Source/portable/GCC/ARM_CM7/r0p1 

ifeq ($(UNAME), Linux)
imageconvert_executable := $(touchgfx_path)/framework/tools/imageconvert/build/linux/imageconvert.out
fontconvert_executable := $(touchgfx_path)/framework/tools/fontconvert/build/linux/fontconvert.out
else
imageconvert_executable := $(touchgfx_path)/framework/tools/imageconvert/build/win/imageconvert.out
fontconvert_executable := $(touchgfx_path)/framework/tools/fontconvert/build/win/fontconvert.out
stm32cubeProgrammer := STMicroelectronics\\STM32Cube\\STM32CubeProgrammer\\bin\\STM32_Programmer_CLI.exe
stm32cubeLoader := STMicroelectronics\\STM32Cube\\STM32CubeProgrammer\\bin\\ExternalLoader\\N25Q128A_STM32F746G-DISCO.stldr

ifneq ("$(shell find "$(PROGRAMFILES)\\$(stm32cubeProgrammer)" 2> nul )","")
# STM32CubeProgrammer is placed in Program Files (x86)
st_stm32cube_programmer := "$(PROGRAMFILES)\\$(stm32cubeProgrammer)"
st_stm32cube_external_loader := "$(PROGRAMFILES)\\$(stm32cubeLoader)"
else
# STM32CubeProgrammer is placed in Program Files
st_stm32cube_programmer := "$(PROGRAMW6432)\\$(stm32cubeProgrammer)"
st_stm32cube_external_loader := "$(PROGRAMW6432)\\$(stm32cubeLoader)"
endif

endif

target_executable := target.elf
target_hex := target.hex

assembler         := arm-none-eabi-gcc

assembler_options += \
    -g  \
    -fno-exceptions\
    $(no_libs) -mthumb -mno-thumb-interwork  \
    -Wall
    
assembler_options += $(float_options)

c_compiler         := arm-none-eabi-gcc
c_compiler_options += \
    -g \
    -mthumb -fno-exceptions \
    -mno-thumb-interwork -std=c99 \
    $(no_libs) \
    -Os -fno-strict-aliasing -fdata-sections -ffunction-sections

c_compiler_options += $(float_options)

cpp_compiler         := arm-none-eabi-g++
cpp_compiler_options += \
    -g -mthumb \
    $(no_libs) \
    -mno-thumb-interwork -fno-rtti -fno-exceptions  \
    -Os -fno-strict-aliasing -fdata-sections -ffunction-sections

cpp_compiler_options += $(float_options)

linker         := arm-none-eabi-g++
linker_options += \
    -g -Wl,-static -mthumb $(no_libs) -mno-thumb-interwork \
    -fno-exceptions -specs=nosys.specs -fno-rtti \
    -Os -fno-strict-aliasing -Wl,--gc-sections

objcopy := arm-none-eabi-objcopy

archiver := arm-none-eabi-ar

strip := arm-none-eabi-strip

# Additional toolchain configuration for Cortex-M7 targets.

float_options := -mfpu=fpv5-sp-d16 -mfloat-abi=softfp

assembler_options += -mthumb -mcpu=cortex-m7 -Wno-psabi $(float_options) -DCORE_M7 -D__irq=""
c_compiler_options += -mthumb -mcpu=cortex-m7 -Wno-psabi $(float_options) -DCORE_M7 -D__irq=""
cpp_compiler_options += -mthumb -mcpu=cortex-m7 -Wno-psabi $(float_options) -DCORE_M7 -D__irq=""
linker_options += -mcpu=cortex-m7 -Wno-psabi $(float_options)

#include everything + specific vendor folders
framework_includes := $(touchgfx_path)/framework/include

#this needs to change when assset include folder changes.
all_components := $(components) \
	$(asset_fonts_output) \
	$(asset_images_output) \
	$(asset_texts_output)

#keep framework include and source out of this mess! :)
include_paths := $(library_includes) \
    $(foreach comp, $(all_components), $(comp)/include) \
    $(foreach comp, $(cubemx_components), $(comp)/Inc) \
    $(foreach comp, $(touchgfx_generator_components), $(comp)/generated) \
    $(framework_includes) \
    $(cubemx_middlewares_path) \
    $(touchgfx_middlewares_path) \
    $(touchgfx_generator_components)

source_paths = $(foreach comp, $(all_components), $(comp)/src) \
    $(foreach comp, $(cubemx_components), $(comp)/Src) \
    $(touchgfx_generator_components)

# Finds files that matches the specified pattern. The directory list
# is searched recursively. It is safe to invoke this function with an
# empty list of directories.
#
# Param $(1): List of directories to search
# Param $(2): The file pattern to search for
define find
  $(foreach dir,$(1),$(foreach d,$(wildcard $(dir)/*),\
    $(call find,$(d),$(2))) $(wildcard $(dir)/$(strip $(2))))
endef
unexport find

fontconvert_ttf_lower_files := $(call find, $(asset_fonts_input), *.ttf)
fontconvert_ttf_upper_files := $(call find, $(asset_fonts_input), *.TTF)
fontconvert_otf_lower_files := $(call find, $(asset_fonts_input), *.otf)
fontconvert_otf_upper_files := $(call find, $(asset_fonts_input), *.OTF)
fontconvert_bdf_lower_files := $(call find, $(asset_fonts_input), *.bdf)
fontconvert_bdf_upper_files := $(call find, $(asset_fonts_input), *.BDF)
fontconvert_font_files := \
    $(fontconvert_ttf_lower_files) \
    $(fontconvert_ttf_upper_files) \
    $(fontconvert_otf_lower_files) \
    $(fontconvert_otf_upper_files) \
    $(fontconvert_bdf_lower_files) \
    $(fontconvert_bdf_upper_files)

source_files := $(call find, $(source_paths),*.cpp)

board_c_files :=



board_c_files := \

board_cpp_files :=

board_include_paths := \
    $(Common_path)/Drivers/CMSIS/Device/ST/STM32F7xx/Include \
    $(Common_path)/Drivers/CMSIS/Include \
    $(cubemx_os_path)/Source/CMSIS_RTOS \

#asm_source_files := $(makefile_path_relative)/startup_stm32f746nghx.s
asm_source_files := $(startup_path)/startup_stm32f746nghx.s

c_compiler_options +=
cpp_compiler_options +=

my_inc_paths := \
	$(startup_path)\
	$(LWIP_path)\
	$(USB_path)\
	$(USB_path)/STM32_USB_Host_Library/Class/MSC/Inc\
	$(USB_path)/STM32_USB_Host_Library/Core/Inc\
	$(cubemx_middlewares_path)/Third_Party/LwIP/system\
	$(cubemx_middlewares_path)/Third_Party/LwIP/system/arch\
	$(cubemx_middlewares_path)/Third_Party/LwIP/system/OS\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/lwip\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/lwip/apps\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/lwip/priv\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/lwip/prot\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/netif\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/compat/posix\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/compat/posix/arpa\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/compat/posix/net\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/compat/posix/sys\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/include/compat/stdc\
	$(Common_path)\
	$(Common_path)/Libraries\
	$(Common_path)/Libraries/FatFs/src\
	$(Common_path)/Libraries/FatFs/App\
	$(Common_path)/Libraries/FatFs/Target\
	$(Common_path)/Components\
	$(Common_path)/Utils\
	$(Common_path)/Peripherals/Inc\
	$(Common_path)/GFX\
	
my_src_paths := \
	$(startup_path)/system_stm32f7xx.c\
	$(LWIP_path)/lwip.c\
	$(LWIP_path)/ethernetif.c\
	$(USB_path)/usb_host.c\
	$(USB_path)/usbh_conf.c\
	$(USB_path)/usbh_platform.c\
	$(USB_path)/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc.c\
	$(USB_path)/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc_bot.c\
	$(USB_path)/STM32_USB_Host_Library/Class/MSC/Src/usbh_msc_scsi.c\
	$(USB_path)/STM32_USB_Host_Library/Core/Src/usbh_core.c\
	$(USB_path)/STM32_USB_Host_Library/Core/Src/usbh_ctlreq.c\
	$(USB_path)/STM32_USB_Host_Library/Core/Src/usbh_ioreq.c\
	$(USB_path)/STM32_USB_Host_Library/Core/Src/usbh_pipes.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/system/OS/sys_arch.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/auth.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/ccp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/chap-md5.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/chap-new.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/chap_ms.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/demand.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/eap.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/ecp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/eui64.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/fsm.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/ipcp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/ipv6cp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/lcp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/magic.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/mppe.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/multilink.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/ppp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/pppapi.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/pppcrypt.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/pppoe.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/pppol2tp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/pppos.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/upap.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/utils.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ppp/vj.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/bridgeif.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/bridgeif_fdb.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/ethernet.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/lowpan6.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/lowpan6_ble.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/lowpan6_common.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/slipif.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/netif/zepif.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/dhcp6.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/ethip6.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/icmp6.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/inet6.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/ip6.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/ip6_addr.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/ip6_frag.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/mld6.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv6/nd6.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv4/autoip.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv4/dhcp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv4/etharp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv4/icmp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv4/igmp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv4/ip4.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv4/ip4_addr.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ipv4/ip4_frag.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/altcp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/altcp_alloc.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/altcp_tcp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/def.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/dns.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/inet_chksum.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/init.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/ip.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/mem.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/memp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/netif.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/pbuf.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/raw.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/stats.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/sys.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/tcp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/tcp_in.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/tcp_out.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/timeouts.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/core/udp.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/apps/mqtt/mqtt.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/api_lib.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/api_msg.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/err.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/if_api.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/netbuf.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/netdb.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/netifapi.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/sockets.c\
	$(cubemx_middlewares_path)/Third_Party/LwIP/src/api/tcpip.c\
	$(Common_path)/Libraries/QSPI/stm32746g_discovery_qspi.c\
	$(Common_path)/Libraries/FatFs/src/option/syscall.c\
	$(Common_path)/Libraries/FatFs/src/ff.c\
	$(Common_path)/Libraries/FatFs/src/ff_gen_drv.c\
	$(Common_path)/Libraries/FatFs/src/diskio.c\
	$(Common_path)/Libraries/FatFs/App/fatfs.c\
	$(Common_path)/Libraries/FatFs/Target/usbh_diskio.c\
	$(Common_path)/Libraries/FatFs/Target/sd_diskio.c\
	$(Common_path)/Libraries/FatFs/Target/bsp_driver_sd.c\
	$(Common_path)/Libraries/FatFs/Target/fatfs_platform.c\
	$(Common_path)/Components/FatFs/fatFileSystem.c\
	$(Common_path)/Components/Modbus/modbusCommon.c\
	$(Common_path)/Components/Modbus/Client/modbusClient.c\
	$(Common_path)/Components/Modbus/Client/modbusClientManager.c\
	$(Common_path)/Components/Modbus/RS485/modbusClientRS485.c\
	$(Common_path)/Components/Modbus/RS485/modbusServerRS485.c\
	$(Common_path)/Components/Modbus/Serial/modbusSerialLib.c\
	$(Common_path)/Components/Modbus/Server/modbusServer.c\
	$(Common_path)/Components/Modbus/Server/modbusServerManager.c\
	$(Common_path)/Components/Modbus/TCPIP/modbusClientTCPIP.c\
	$(Common_path)/Components/Modbus/TCPIP/modbusServerTCPIP.c\
	$(Common_path)/Components/Modbus/TCPIP/modbusTCPIPLib.c\
	$(Common_path)/Components/Modbus/TTL/modbusClientTTL.c\
	$(Common_path)/Components/Modbus/TTL/modbusServerTTL.c\
	$(Common_path)/Components/Modbus/INT/modbusClientINT.c\
	$(Common_path)/Components/TouchDrivers/ts.c\
	$(Common_path)/Components/TouchDrivers/gt911/gt911.c\
	$(Common_path)/Components/TouchDrivers/hycon/hycon.c\
	$(Common_path)/Components/TouchDrivers/Resistive/resistiveTs.c\
	$(Common_path)/Modules/Manager/moduleManager.c\
	$(Common_path)/Modules/Brightness/brightnessModule.c\
	$(Common_path)/Modules/Buzzer/buzzerModule.c\
	$(Common_path)/Modules/Converter/converter.c\
	$(Common_path)/Modules/Display/displayModule.c\
	$(Common_path)/Modules/FatFs/fatFsModule.c\
	$(Common_path)/Modules/Job/jobModule.c\
	$(Common_path)/Modules/Language/langModule.c\
	$(Common_path)/Modules/Math/maths.c\
	$(Common_path)/Modules/Memory/memoryModule.c\
	$(Common_path)/Modules/Modbus/modbusModule.c\
	$(Common_path)/Modules/Settings/settings.c\
	$(Common_path)/Modules/Time/TimeModule.c\
	$(Common_path)/Modules/TS/tsModule.c\
	$(Common_path)/Peripherals/Src/adc.c\
	$(Common_path)/Peripherals/Src/brightness.c\
	$(Common_path)/Peripherals/Src/buzzer.c\
	$(Common_path)/Peripherals/Src/capacitive.c\
	$(Common_path)/Peripherals/Src/crc.c\
	$(Common_path)/Peripherals/Src/display.c\
	$(Common_path)/Peripherals/Src/dma2D.c\
	$(Common_path)/Peripherals/Src/gpio.c\
	$(Common_path)/Peripherals/Src/ltcd.c\
	$(Common_path)/Peripherals/Src/memory.c\
	$(Common_path)/Peripherals/Src/modbus.c\
	$(Common_path)/Peripherals/Src/modbusTTL.c\
	$(Common_path)/Peripherals/Src/modbusTTLTest.c\
	$(Common_path)/Peripherals/Src/ethernet.c\
	$(Common_path)/Peripherals/Src/tcp_client.c\
	$(Common_path)/Peripherals/Src/tcp_server.c\
	$(Common_path)/Peripherals/Src/mpu.c\
	$(Common_path)/Peripherals/Src/parameters.c\
	$(Common_path)/Peripherals/Src/peripheralManager.c\
	$(Common_path)/Peripherals/Src/rcc.c\
	$(Common_path)/Peripherals/Src/resistive.c\
	$(Common_path)/Peripherals/Src/rtc.c\
	$(Common_path)/Peripherals/Src/sd.c\
	$(Common_path)/Peripherals/Src/touch.c\
	$(Common_path)/Peripherals/Src/usb.c\
	$(Common_path)/Peripherals/Src/wait.c\
	$(Common_path)/GFX/Module/Src/converter.cpp\
	$(Common_path)/GFX/Module/Src/graphic.cpp\
	$(Common_path)/GFX/Module/Src/GraphicItems.cpp\
	$(Common_path)/GFX/Module/Src/keyboard.cpp\
	$(Common_path)/GFX/Module/Src/numericalKeyboard.cpp\
	$(Common_path)/GFX/Module/Src/scroll.cpp\
	$(Common_path)/GFX/Module/Src/user.cpp\
	$(Common_path)/GFX/AT_module.cpp\
	
include_paths += platform/os $(board_include_paths) $(os_include_paths) $(my_inc_paths)


c_source_files := $(call find, $(source_paths),*.c) $(os_source_files) $(board_c_files) $(my_src_paths)
source_files += $(board_cpp_files)


object_files := $(source_files) $(c_source_files)
# Start converting paths
object_files := $(object_files:$(touchgfx_path)/%.cpp=$(object_output_path)/touchgfx/%.o)
object_files := $(object_files:%.cpp=$(object_output_path)/%.o)
object_files := $(object_files:$(touchgfx_middlewares_path)/%.c=$(object_output_path)/$(touchgfx_middlewares_path)/%.o)
object_files := $(object_files:$(cubemx_middlewares_path)/%.c=$(object_output_path)/$(cubemx_middlewares_path)/%.o)
#object_files := $(object_files:$(Drivers_path)/%.c=$(object_output_path)/Drivers/%.o)
object_files := $(object_files:%.c=$(object_output_path)/%.o)
dependency_files := $(object_files:%.o=%.d)

object_asm_files := $(asm_source_files:%.s=$(object_output_path)/%.o)
object_asm_files := $(patsubst $(object_output_path)/%,$(object_output_path)/%,$(object_asm_files))

textconvert_script_path := $(touchgfx_path)/framework/tools/textconvert
textconvert_executable := $(call find, $(textconvert_script_path), *.rb)

text_database := $(asset_texts_input)/texts.xlsx

libraries := touchgfx
library_include_paths := $(touchgfx_path)/lib/core/$(platform)/gcc

.PHONY: _all_ _clean_ _assets_ _flash_ _intflash_ generate_assets build_executable

# Force linking each time
.PHONY: $(binary_output_path)/$(target_executable)

_all_: generate_assets

ifeq ($(shell find "$(application_path)" -wholename "$(application_path)/$(binary_output_path)/extflash.bin" -size +0c | wc -l | xargs echo),1)
_flash_: _extflash_
else
_flash_: _intflash_
endif

_extflash_:
	@$(st_stm32cube_programmer) -c port=SWD -d $(binary_output_path)/target.hex -el $(st_stm32cube_external_loader) -hardRst

_intflash_:
	@$(st_stm32cube_programmer) -c port=SWD -d $(binary_output_path)/intflash.hex -hardRst

generate_assets: _assets_
	@$(MAKE) -f $(makefile_name) -r -s $(MFLAGS) build_executable
build_executable: $(binary_output_path)/$(target_executable)

$(binary_output_path)/$(target_executable): $(object_files) $(object_asm_files)
	@echo Linking $(@)
	@mkdir -p $(@D)
	@mkdir -p $(object_output_path)
	@$(file >$(build_root_path)/objects.tmp) $(foreach F,$(object_files),$(file >>$(build_root_path)/objects.tmp,$F))
	@$(linker) \
		$(linker_options) -T $(makefile_path_relative)/STM32F746NGHx_FLASH.ld -Wl,-Map=$(@D)/application.map $(linker_options_local) \
		$(patsubst %,-L%,$(library_include_paths)) \
		@$(build_root_path)/objects.tmp $(object_asm_files) -o $@ \
		-Wl,--start-group $(patsubst %,-l%,$(libraries)) -Wl,--end-group
	@rm -f $(build_root_path)/objects.tmp
	@echo "Producing additional output formats..."
	@echo "  target.hex   - Combined internal+external hex"
	@$(objcopy) -O ihex $@ $(@D)/target.hex
	@echo "  intflash.elf - Internal flash, elf debug"
	@$(objcopy) --remove-section=ExtFlashSection $@ $(@D)/intflash.elf 2>/dev/null
	@echo "  intflash.hex - Internal flash, hex"
	@$(objcopy) -O ihex --remove-section=ExtFlashSection $@ $(@D)/intflash.hex
	@echo "  extflash.bin - External flash, binary"
	@$(objcopy) -O binary --only-section=*FlashSection $@ $(@D)/extflash.bin

$(object_output_path)/touchgfx/%.o: $(touchgfx_path)/%.cpp TouchGFX/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(cpp_compiler) \
		-MMD -MP $(cpp_compiler_options) $(cpp_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.cpp TouchGFX/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(cpp_compiler) \
		-MMD -MP $(cpp_compiler_options) $(cpp_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/touchgfx/%.o: $(touchgfx_path)/%.c TouchGFX/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(c_compiler) \
		-MMD -MP $(c_compiler_options) $(c_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.c TouchGFX/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(c_compiler) \
		-MMD -MP $(c_compiler_options) $(c_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.s TouchGFX/config/gcc/app.mk
	@echo Compiling ASM $<
	@mkdir -p $(@D)
	@$(assembler) \
		$(assembler_options) \
		$(patsubst %,-I %,$(os_include_paths)) \
		-c $< -o $@

ifeq ($(MAKECMDGOALS),build_executable)
$(firstword $(dependency_files)): TouchGFX/config/gcc/app.mk
	@rm -rf $(object_output_path)
-include $(dependency_files)
endif

_assets_: BitmapDatabase TextKeysAndLanguages

.PHONY: BitmapDatabase TextKeysAndLanguages

BitmapDatabase:
	@$(imageconvert_executable) -r $(asset_images_input) -w $(asset_images_output)

TextKeysAndLanguages:
	@mkdir -p $(asset_texts_output)/include/texts
	@ruby $(textconvert_script_path)/main.rb $(text_database) $(fontconvert_executable) $(asset_fonts_output) $(asset_texts_output) $(asset_fonts_input) TouchGFX $(text_converter_options)

_clean_:
	@echo Cleaning
	@rm -rf $(build_root_path)
	# Do not remove gui_generated
	@rm -rf $(asset_images_output)
	@rm -rf $(asset_fonts_output)
	@rm -rf $(asset_texts_output)
	# Create directory to avoid error if it does not exist
	@mkdir -p $(asset_root_path)
	# Remove assets folder if it is empty (i.e. no gui_generated folder)
	@rmdir --ignore-fail-on-non-empty $(asset_root_path)
